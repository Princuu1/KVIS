{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false\n    }\n  },\n});\n","size_bytes":374},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Student Attendance & Automation App\n\n## Overview\n\nA comprehensive student attendance management application built with modern web technologies. The system provides automated attendance tracking through face recognition and geofencing, manual attendance marking, real-time chat functionality, and academic management features including calendar events, exam scheduling, and syllabus tracking. The application combines a React-based frontend with an Express.js backend, utilizing PostgreSQL for data persistence and WebSocket for real-time communication.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend uses React with TypeScript, built with Vite for optimal development and build performance. The application follows a component-based architecture with:\n- **UI Framework**: shadcn/ui components built on Radix UI primitives for consistent design\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with CSS variables for theming support\n- **Real-time Communication**: WebSocket client integration for chat functionality\n- **Face Recognition**: face-api.js (TensorFlow.js) for browser-based facial recognition\n- **Geolocation**: Native browser Geolocation API for campus boundary verification\n\n### Backend Architecture\nThe backend is built on Node.js with Express, featuring:\n- **API Structure**: RESTful endpoints with Express.js middleware\n- **Authentication**: JWT-based authentication with httpOnly cookies\n- **WebSocket Server**: Real-time chat functionality using native WebSocket\n- **File Handling**: Multer middleware for ID photo uploads\n- **Password Security**: bcrypt for password hashing\n- **Middleware Pipeline**: Custom logging, error handling, and authentication middleware\n\n### Database Design\nPostgreSQL database managed through Drizzle ORM with the following core entities:\n- **Users**: Student profiles with face descriptors and contact information\n- **Attendance Records**: Timestamped entries with status, location, and verification method\n- **Calendar Events**: Academic calendar with events, holidays, and exam dates\n- **Exam Schedule**: Structured exam timing and location information\n- **Syllabus Items**: Course content tracking with completion status\n- **Chat Messages**: Real-time messaging with room-based organization\n\n### Security Implementation\n- JWT tokens stored in secure, httpOnly cookies\n- Password hashing with bcrypt\n- Face recognition data stored as Float32 arrays in JSON format\n- CORS configuration for client-server communication\n- Input validation and sanitization\n- Protected route authentication middleware\n\n### Real-time Features\nWebSocket implementation for:\n- Live chat messaging in general room\n- Online user count tracking\n- Message broadcasting to connected clients\n- Automatic reconnection handling\n\n### Mobile-First Design\nResponsive design approach with:\n- Tailwind CSS breakpoint system\n- Mobile-optimized navigation with bottom tabs\n- Touch-friendly interface elements\n- Progressive web app capabilities\n\n## External Dependencies\n\n### Database Services\n- **PostgreSQL**: Primary database via DATABASE_URL environment variable\n- **Neon Database**: Serverless PostgreSQL hosting (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations with migrations\n\n### UI and Styling Libraries\n- **Radix UI**: Comprehensive primitive component library\n- **shadcn/ui**: Pre-built component system\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n\n### Authentication and Security\n- **JWT**: JSON Web Token implementation\n- **bcrypt**: Password hashing library\n- **Multer**: File upload handling middleware\n\n### Real-time and Communication\n- **WebSocket**: Native WebSocket for real-time chat\n- **TanStack React Query**: Server state management and caching\n\n### AI and Machine Learning\n- **face-api.js**: TensorFlow.js-based face recognition\n- **TensorFlow.js**: Machine learning model execution in browser\n\n### Development and Build Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Type safety across the application\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Email and Notifications\n- **Nodemailer**: SMTP email sending (configured but not fully implemented in current codebase)\n\n### File Storage and Assets\n- Local file system storage for uploaded ID photos\n- Static asset serving through Express middleware\n\n### Environment Configuration\n- Environment variables for database connection\n- JWT secret configuration\n- Development vs production environment handling","size_bytes":4747},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(cookieParser());\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2133},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { sendWelcomeEmail } from \"./emailService\";\nimport { \n  insertUserSchema, \n  loginSchema, \n  insertAttendanceSchema,\n  insertCalendarEventSchema,\n  insertExamSchema,\n  insertSyllabusSchema,\n  insertChatMessageSchema\n} from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\nconst upload = multer({ dest: \"uploads/\" });\n\n// Extended Request interface for TypeScript\ninterface AuthenticatedRequest extends Express.Request {\n  user?: any;\n  file?: any;\n  cookies?: any;\n}\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: AuthenticatedRequest, res: any, next: any) => {\n  const token = req.cookies?.token;\n  \n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: \"Invalid token\" });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server for real-time chat\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const connectedClients = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws: WebSocket, req) => {\n    console.log('New WebSocket connection');\n    \n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'join') {\n          connectedClients.set(message.userId, ws);\n        } else if (message.type === 'chat') {\n          // Save message to storage\n          const chatMessage = await storage.createChatMessage({\n            userId: message.userId,\n            message: message.text,\n            room: message.room || 'general'\n          });\n          \n          // Broadcast to all connected clients\n          const broadcastData = JSON.stringify({\n            type: 'chat',\n            message: chatMessage\n          });\n          \n          wss.clients.forEach((client) => {\n            if (client.readyState === WebSocket.OPEN) {\n              client.send(broadcastData);\n            }\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      // Remove client from connected clients\n      for (const [userId, client] of connectedClients) {\n        if (client === ws) {\n          connectedClients.delete(userId);\n          break;\n        }\n      }\n    });\n  });\n\n  // Auth routes\n  app.post(\"/api/auth/register\", upload.single('idPhoto'), async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByRollNo(userData.collegeRollNo);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User with this roll number already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n        idPhotoUrl: req.file?.path || null,\n      });\n\n      // Remove password from response\n      const { password, ...userResponse } = user;\n      \n      // Send welcome email (don't block response if email fails)\n      sendWelcomeEmail({\n        studentName: user.fullName,\n        studentEmail: user.studentEmail,\n        collegeRollNo: user.collegeRollNo,\n        parentEmail: user.parentEmail,\n      }).catch(error => {\n        console.error('Failed to send welcome email:', error);\n      });\n      \n      res.status(201).json({ user: userResponse });\n    } catch (error) {\n      res.status(400).json({ message: \"Registration failed\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { collegeRollNo, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByRollNo(collegeRollNo);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, rollNo: user.collegeRollNo },\n        JWT_SECRET,\n        { expiresIn: \"24h\" }\n      );\n\n      // Set httpOnly cookie\n      res.cookie(\"token\", token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      });\n\n      const { password: _, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error) {\n      res.status(400).json({ message: \"Login failed\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    res.clearCookie(\"token\");\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Attendance routes\n  app.get(\"/api/attendance\", authenticateToken, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const records = await storage.getAttendanceRecords(\n        req.user.userId,\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json({ records });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get attendance records\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/attendance\", authenticateToken, async (req, res) => {\n    try {\n      const attendanceData = insertAttendanceSchema.parse({\n        ...req.body,\n        userId: req.user.userId,\n        date: new Date(req.body.date || Date.now()),\n      });\n      \n      const record = await storage.createAttendanceRecord(attendanceData);\n      res.status(201).json({ record });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create attendance record\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/attendance/stats\", authenticateToken, async (req, res) => {\n    try {\n      const stats = await storage.getAttendanceStats(req.user.userId);\n      res.json({ stats });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get attendance stats\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Calendar routes\n  app.get(\"/api/calendar\", authenticateToken, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const events = await storage.getCalendarEvents(\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json({ events });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get calendar events\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/calendar\", authenticateToken, async (req, res) => {\n    try {\n      const eventData = insertCalendarEventSchema.parse({\n        ...req.body,\n        createdBy: req.user.userId,\n        date: new Date(req.body.date),\n        endDate: req.body.endDate ? new Date(req.body.endDate) : undefined,\n      });\n      \n      const event = await storage.createCalendarEvent(eventData);\n      res.status(201).json({ event });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create calendar event\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Exam routes\n  app.get(\"/api/exams\", authenticateToken, async (req, res) => {\n    try {\n      const exams = await storage.getExamSchedule();\n      res.json({ exams });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get exam schedule\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/exams\", authenticateToken, async (req, res) => {\n    try {\n      const examData = insertExamSchema.parse({\n        ...req.body,\n        date: new Date(req.body.date),\n      });\n      \n      const exam = await storage.createExam(examData);\n      res.status(201).json({ exam });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create exam\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Syllabus routes\n  app.get(\"/api/syllabus\", authenticateToken, async (req, res) => {\n    try {\n      const syllabus = await storage.getSyllabus();\n      res.json({ syllabus });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get syllabus\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/syllabus\", authenticateToken, async (req, res) => {\n    try {\n      const syllabusData = insertSyllabusSchema.parse({\n        ...req.body,\n        dueDate: req.body.dueDate ? new Date(req.body.dueDate) : undefined,\n      });\n      \n      const item = await storage.createSyllabusItem(syllabusData);\n      res.status(201).json({ item });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create syllabus item\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Chat routes\n  app.get(\"/api/chat/messages\", authenticateToken, async (req, res) => {\n    try {\n      const { room = 'general', limit = 50 } = req.query;\n      const messages = await storage.getChatMessages(room as string, parseInt(limit as string));\n      res.json({ messages });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get chat messages\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Face descriptor update route\n  app.post(\"/api/user/face-descriptor\", authenticateToken, async (req, res) => {\n    try {\n      const { faceDescriptor } = req.body;\n      \n      const updatedUser = await storage.updateUser(req.user.userId, {\n        faceDescriptor,\n      });\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"Face descriptor updated successfully\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update face descriptor\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Webhook for external attendance marking\n  app.post(\"/api/webhooks/attendance\", async (req, res) => {\n    try {\n      const { collegeRollNo, status, subject, location } = req.body;\n      \n      const user = await storage.getUserByRollNo(collegeRollNo);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const record = await storage.createAttendanceRecord({\n        userId: user.id,\n        date: new Date(),\n        status,\n        subject,\n        location,\n        method: 'webhook',\n        verified: true,\n      });\n\n      res.status(201).json({ record });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create attendance record\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":12166},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type AttendanceRecord, \n  type InsertAttendance,\n  type CalendarEvent,\n  type InsertCalendarEvent,\n  type ExamScheduleItem,\n  type InsertExam,\n  type SyllabusItem,\n  type InsertSyllabus,\n  type ChatMessage,\n  type InsertChatMessage,\n  users,\n  attendanceRecords,\n  calendarEvents,\n  examSchedule,\n  syllabus,\n  chatMessages\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByRollNo(rollNo: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Attendance operations\n  getAttendanceRecords(userId: string, startDate?: Date, endDate?: Date): Promise<AttendanceRecord[]>;\n  createAttendanceRecord(record: InsertAttendance): Promise<AttendanceRecord>;\n  getAttendanceStats(userId: string): Promise<{\n    totalPresent: number;\n    totalAbsent: number;\n    totalLeave: number;\n    percentage: number;\n  }>;\n\n  // Calendar operations\n  getCalendarEvents(startDate?: Date, endDate?: Date): Promise<CalendarEvent[]>;\n  createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent>;\n  updateCalendarEvent(id: string, updates: Partial<CalendarEvent>): Promise<CalendarEvent | undefined>;\n  deleteCalendarEvent(id: string): Promise<boolean>;\n\n  // Exam operations\n  getExamSchedule(): Promise<ExamScheduleItem[]>;\n  createExam(exam: InsertExam): Promise<ExamScheduleItem>;\n  updateExam(id: string, updates: Partial<ExamScheduleItem>): Promise<ExamScheduleItem | undefined>;\n  deleteExam(id: string): Promise<boolean>;\n\n  // Syllabus operations\n  getSyllabus(): Promise<SyllabusItem[]>;\n  createSyllabusItem(item: InsertSyllabus): Promise<SyllabusItem>;\n  updateSyllabusItem(id: string, updates: Partial<SyllabusItem>): Promise<SyllabusItem | undefined>;\n  deleteSyllabusItem(id: string): Promise<boolean>;\n\n  // Chat operations\n  getChatMessages(room: string, limit?: number): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private attendanceRecords: Map<string, AttendanceRecord> = new Map();\n  private calendarEvents: Map<string, CalendarEvent> = new Map();\n  private examSchedule: Map<string, ExamScheduleItem> = new Map();\n  private syllabus: Map<string, SyllabusItem> = new Map();\n  private chatMessages: Map<string, ChatMessage> = new Map();\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByRollNo(rollNo: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.collegeRollNo === rollNo);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.studentEmail === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      isActive: true,\n      createdAt: new Date(),\n      idPhotoUrl: insertUser.idPhotoUrl ?? null,\n      faceDescriptor: insertUser.faceDescriptor ?? null,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getAttendanceRecords(userId: string, startDate?: Date, endDate?: Date): Promise<AttendanceRecord[]> {\n    return Array.from(this.attendanceRecords.values())\n      .filter(record => record.userId === userId)\n      .filter(record => {\n        if (startDate && record.date < startDate) return false;\n        if (endDate && record.date > endDate) return false;\n        return true;\n      })\n      .sort((a, b) => b.date.getTime() - a.date.getTime());\n  }\n\n  async createAttendanceRecord(insertRecord: InsertAttendance): Promise<AttendanceRecord> {\n    const id = randomUUID();\n    const record: AttendanceRecord = {\n      ...insertRecord,\n      id,\n      createdAt: new Date(),\n      subject: insertRecord.subject ?? null,\n      method: insertRecord.method ?? null,\n      location: insertRecord.location ?? null,\n      reason: insertRecord.reason ?? null,\n      verified: insertRecord.verified ?? null,\n      latitude: insertRecord.latitude ?? null,\n      longitude: insertRecord.longitude ?? null,\n    };\n    this.attendanceRecords.set(id, record);\n    return record;\n  }\n\n  async getAttendanceStats(userId: string): Promise<{\n    totalPresent: number;\n    totalAbsent: number;\n    totalLeave: number;\n    percentage: number;\n  }> {\n    const records = await this.getAttendanceRecords(userId);\n    const totalPresent = records.filter(r => r.status === 'present').length;\n    const totalAbsent = records.filter(r => r.status === 'absent').length;\n    const totalLeave = records.filter(r => r.status === 'leave').length;\n    const total = records.length;\n    \n    return {\n      totalPresent,\n      totalAbsent,\n      totalLeave,\n      percentage: total > 0 ? Math.round((totalPresent / total) * 100) : 0,\n    };\n  }\n\n  async getCalendarEvents(startDate?: Date, endDate?: Date): Promise<CalendarEvent[]> {\n    return Array.from(this.calendarEvents.values())\n      .filter(event => {\n        if (startDate && event.date < startDate) return false;\n        if (endDate && event.date > endDate) return false;\n        return true;\n      })\n      .sort((a, b) => a.date.getTime() - b.date.getTime());\n  }\n\n  async createCalendarEvent(insertEvent: InsertCalendarEvent): Promise<CalendarEvent> {\n    const id = randomUUID();\n    const event: CalendarEvent = {\n      ...insertEvent,\n      id,\n      createdAt: new Date(),\n      description: insertEvent.description ?? null,\n      endDate: insertEvent.endDate ?? null,\n      createdBy: insertEvent.createdBy ?? null,\n    };\n    this.calendarEvents.set(id, event);\n    return event;\n  }\n\n  async updateCalendarEvent(id: string, updates: Partial<CalendarEvent>): Promise<CalendarEvent | undefined> {\n    const event = this.calendarEvents.get(id);\n    if (!event) return undefined;\n    \n    const updatedEvent = { ...event, ...updates };\n    this.calendarEvents.set(id, updatedEvent);\n    return updatedEvent;\n  }\n\n  async deleteCalendarEvent(id: string): Promise<boolean> {\n    return this.calendarEvents.delete(id);\n  }\n\n  async getExamSchedule(): Promise<ExamScheduleItem[]> {\n    return Array.from(this.examSchedule.values())\n      .sort((a, b) => a.date.getTime() - b.date.getTime());\n  }\n\n  async createExam(insertExam: InsertExam): Promise<ExamScheduleItem> {\n    const id = randomUUID();\n    const exam: ExamScheduleItem = {\n      ...insertExam,\n      id,\n      createdAt: new Date(),\n      instructions: insertExam.instructions ?? null,\n    };\n    this.examSchedule.set(id, exam);\n    return exam;\n  }\n\n  async updateExam(id: string, updates: Partial<ExamScheduleItem>): Promise<ExamScheduleItem | undefined> {\n    const exam = this.examSchedule.get(id);\n    if (!exam) return undefined;\n    \n    const updatedExam = { ...exam, ...updates };\n    this.examSchedule.set(id, updatedExam);\n    return updatedExam;\n  }\n\n  async deleteExam(id: string): Promise<boolean> {\n    return this.examSchedule.delete(id);\n  }\n\n  async getSyllabus(): Promise<SyllabusItem[]> {\n    return Array.from(this.syllabus.values())\n      .sort((a, b) => {\n        if (a.dueDate && b.dueDate) {\n          return a.dueDate.getTime() - b.dueDate.getTime();\n        }\n        return a.subject.localeCompare(b.subject);\n      });\n  }\n\n  async createSyllabusItem(insertItem: InsertSyllabus): Promise<SyllabusItem> {\n    const id = randomUUID();\n    const item: SyllabusItem = {\n      ...insertItem,\n      id,\n      createdAt: new Date(),\n      description: insertItem.description ?? null,\n      dueDate: insertItem.dueDate ?? null,\n      completed: insertItem.completed ?? null,\n    };\n    this.syllabus.set(id, item);\n    return item;\n  }\n\n  async updateSyllabusItem(id: string, updates: Partial<SyllabusItem>): Promise<SyllabusItem | undefined> {\n    const item = this.syllabus.get(id);\n    if (!item) return undefined;\n    \n    const updatedItem = { ...item, ...updates };\n    this.syllabus.set(id, updatedItem);\n    return updatedItem;\n  }\n\n  async deleteSyllabusItem(id: string): Promise<boolean> {\n    return this.syllabus.delete(id);\n  }\n\n  async getChatMessages(room: string, limit: number = 50): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(message => message.room === room)\n      .sort((a, b) => (b.createdAt?.getTime() ?? 0) - (a.createdAt?.getTime() ?? 0))\n      .slice(0, limit)\n      .reverse();\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      ...insertMessage,\n      id,\n      createdAt: new Date(),\n      room: insertMessage.room ?? null,\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByRollNo(rollNo: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.collegeRollNo, rollNo));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.studentEmail, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user || undefined;\n  }\n\n  async getAttendanceRecords(userId: string, startDate?: Date, endDate?: Date): Promise<AttendanceRecord[]> {\n    const conditions = [eq(attendanceRecords.userId, userId)];\n    \n    if (startDate) {\n      conditions.push(gte(attendanceRecords.date, startDate));\n    }\n    if (endDate) {\n      conditions.push(lte(attendanceRecords.date, endDate));\n    }\n    \n    return await db.select().from(attendanceRecords)\n      .where(and(...conditions))\n      .orderBy(desc(attendanceRecords.date));\n  }\n\n  async createAttendanceRecord(insertRecord: InsertAttendance): Promise<AttendanceRecord> {\n    const [record] = await db.insert(attendanceRecords).values(insertRecord).returning();\n    return record;\n  }\n\n  async getAttendanceStats(userId: string): Promise<{\n    totalPresent: number;\n    totalAbsent: number;\n    totalLeave: number;\n    percentage: number;\n  }> {\n    const records = await this.getAttendanceRecords(userId);\n    const totalPresent = records.filter(r => r.status === 'present').length;\n    const totalAbsent = records.filter(r => r.status === 'absent').length;\n    const totalLeave = records.filter(r => r.status === 'leave').length;\n    const total = records.length;\n    \n    return {\n      totalPresent,\n      totalAbsent,\n      totalLeave,\n      percentage: total > 0 ? Math.round((totalPresent / total) * 100) : 0,\n    };\n  }\n\n  async getCalendarEvents(startDate?: Date, endDate?: Date): Promise<CalendarEvent[]> {\n    const conditions = [];\n    \n    if (startDate) {\n      conditions.push(gte(calendarEvents.date, startDate));\n    }\n    if (endDate) {\n      conditions.push(lte(calendarEvents.date, endDate));\n    }\n    \n    if (conditions.length > 0) {\n      return await db.select().from(calendarEvents)\n        .where(and(...conditions))\n        .orderBy(calendarEvents.date);\n    }\n    \n    return await db.select().from(calendarEvents).orderBy(calendarEvents.date);\n  }\n\n  async createCalendarEvent(insertEvent: InsertCalendarEvent): Promise<CalendarEvent> {\n    const [event] = await db.insert(calendarEvents).values(insertEvent).returning();\n    return event;\n  }\n\n  async updateCalendarEvent(id: string, updates: Partial<CalendarEvent>): Promise<CalendarEvent | undefined> {\n    const [event] = await db.update(calendarEvents).set(updates).where(eq(calendarEvents.id, id)).returning();\n    return event || undefined;\n  }\n\n  async deleteCalendarEvent(id: string): Promise<boolean> {\n    const result = await db.delete(calendarEvents).where(eq(calendarEvents.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getExamSchedule(): Promise<ExamScheduleItem[]> {\n    return await db.select().from(examSchedule).orderBy(examSchedule.date);\n  }\n\n  async createExam(insertExam: InsertExam): Promise<ExamScheduleItem> {\n    const [exam] = await db.insert(examSchedule).values(insertExam).returning();\n    return exam;\n  }\n\n  async updateExam(id: string, updates: Partial<ExamScheduleItem>): Promise<ExamScheduleItem | undefined> {\n    const [exam] = await db.update(examSchedule).set(updates).where(eq(examSchedule.id, id)).returning();\n    return exam || undefined;\n  }\n\n  async deleteExam(id: string): Promise<boolean> {\n    const result = await db.delete(examSchedule).where(eq(examSchedule.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getSyllabus(): Promise<SyllabusItem[]> {\n    return await db.select().from(syllabus).orderBy(syllabus.dueDate, syllabus.subject);\n  }\n\n  async createSyllabusItem(insertItem: InsertSyllabus): Promise<SyllabusItem> {\n    const [item] = await db.insert(syllabus).values(insertItem).returning();\n    return item;\n  }\n\n  async updateSyllabusItem(id: string, updates: Partial<SyllabusItem>): Promise<SyllabusItem | undefined> {\n    const [item] = await db.update(syllabus).set(updates).where(eq(syllabus.id, id)).returning();\n    return item || undefined;\n  }\n\n  async deleteSyllabusItem(id: string): Promise<boolean> {\n    const result = await db.delete(syllabus).where(eq(syllabus.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getChatMessages(room: string, limit: number = 50): Promise<ChatMessage[]> {\n    return await db.select().from(chatMessages)\n      .where(eq(chatMessages.room, room))\n      .orderBy(desc(chatMessages.createdAt))\n      .limit(limit);\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const [message] = await db.insert(chatMessages).values(insertMessage).returning();\n    return message;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14836},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, jsonb, real, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  collegeRollNo: text(\"college_roll_no\").notNull().unique(),\n  fullName: text(\"full_name\").notNull(),\n  studentPhone: text(\"student_phone\").notNull(),\n  parentPhone: text(\"parent_phone\").notNull(),\n  studentEmail: text(\"student_email\").notNull().unique(),\n  parentEmail: text(\"parent_email\").notNull(),\n  password: text(\"password\").notNull(),\n  idPhotoUrl: text(\"id_photo_url\"),\n  faceDescriptor: jsonb(\"face_descriptor\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  date: timestamp(\"date\").notNull(),\n  status: text(\"status\").notNull(), // 'present', 'absent', 'leave'\n  subject: text(\"subject\"),\n  reason: text(\"reason\"),\n  method: text(\"method\"), // 'manual', 'face_recognition', 'geofence'\n  verified: boolean(\"verified\").default(false),\n  location: text(\"location\"),\n  latitude: real(\"latitude\"),\n  longitude: real(\"longitude\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const calendarEvents = pgTable(\"calendar_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  date: timestamp(\"date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  type: text(\"type\").notNull(), // 'event', 'holiday', 'exam'\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const examSchedule = pgTable(\"exam_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subject: text(\"subject\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  startTime: text(\"start_time\").notNull(),\n  endTime: text(\"end_time\").notNull(),\n  location: text(\"location\").notNull(),\n  instructions: text(\"instructions\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const syllabus = pgTable(\"syllabus\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subject: text(\"subject\").notNull(),\n  topic: text(\"topic\").notNull(),\n  description: text(\"description\"),\n  completed: boolean(\"completed\").default(false),\n  dueDate: timestamp(\"due_date\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  message: text(\"message\").notNull(),\n  room: text(\"room\").default(\"general\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  isActive: true,\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendanceRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertExamSchema = createInsertSchema(examSchedule).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSyllabusSchema = createInsertSchema(syllabus).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  collegeRollNo: z.string().min(1, \"Roll number is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type AttendanceRecord = typeof attendanceRecords.$inferSelect;\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\nexport type InsertExam = z.infer<typeof insertExamSchema>;\nexport type ExamScheduleItem = typeof examSchedule.$inferSelect;\nexport type InsertSyllabus = z.infer<typeof insertSyllabusSchema>;\nexport type SyllabusItem = typeof syllabus.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type LoginData = z.infer<typeof loginSchema>;\n","size_bytes":4768},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport Home from \"@/pages/Home\";\nimport Attendance from \"@/pages/Attendance\";\nimport AttendanceHistory from \"@/pages/AttendanceHistory\";\nimport ChatRoom from \"@/pages/ChatRoom\";\nimport Calendar from \"@/pages/Calendar\";\nimport ExamSchedule from \"@/pages/ExamSchedule\";\nimport Syllabus from \"@/pages/Syllabus\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Home />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/attendance\">\n        <ProtectedRoute>\n          <Attendance />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/history\">\n        <ProtectedRoute>\n          <AttendanceHistory />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/chat\">\n        <ProtectedRoute>\n          <ChatRoom />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/calendar\">\n        <ProtectedRoute>\n          <Calendar />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/exams\">\n        <ProtectedRoute>\n          <ExamSchedule />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/syllabus\">\n        <ProtectedRoute>\n          <Syllabus />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2006},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(187, 71%, 38%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(207, 90%, 54%);\n  --chart-1: hsl(207, 90%, 54%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 5%);\n  --sidebar-primary: hsl(207, 90%, 54%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222, 84%, 5%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(207, 90%, 54%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(207, 90%, 54%);\n  --sidebar: hsl(222, 84%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(207, 90%, 54%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(207, 90%, 54%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.screen {\n  display: none;\n}\n\n.screen.active {\n  display: block;\n}\n\n.face-scanner-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.9);\n  z-index: 1000;\n  display: none;\n}\n\n.face-scanner-overlay.active {\n  display: flex;\n}\n\n.pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n.chat-messages {\n  max-height: calc(100vh - 280px);\n  overflow-y: auto;\n}\n\n@media (min-width: 768px) {\n  .mobile-nav {\n    display: none;\n  }\n  \n  .desktop-nav {\n    display: block !important;\n  }\n}\n","size_bytes":3203},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/FaceScanner.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { X, Settings, Camera } from \"lucide-react\";\nimport { initializeFaceAPI, detectFaceFromVideo, getFaceDescriptor, startCamera, stopCamera } from \"@/lib/faceApi\";\n\ninterface FaceScannerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onFaceDetected: (faceDescriptor: Float32Array) => void;\n}\n\nexport default function FaceScanner({ isOpen, onClose, onFaceDetected }: FaceScannerProps) {\n  const [isScanning, setIsScanning] = useState(false);\n  const [faceDetected, setFaceDetected] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isInitializing, setIsInitializing] = useState(false);\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const scanIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const startScanning = async () => {\n    try {\n      setIsInitializing(true);\n      setError(null);\n\n      // Initialize face-api.js\n      await initializeFaceAPI();\n\n      // Start camera\n      const stream = await startCamera();\n      if (!stream) {\n        throw new Error(\"Failed to access camera\");\n      }\n\n      streamRef.current = stream;\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        await new Promise((resolve) => {\n          if (videoRef.current) {\n            videoRef.current.onloadedmetadata = resolve;\n          }\n        });\n        \n        setIsScanning(true);\n        \n        // Start face detection loop\n        scanIntervalRef.current = setInterval(async () => {\n          if (videoRef.current && streamRef.current) {\n            const detection = await detectFaceFromVideo(videoRef.current);\n            setFaceDetected(!!detection);\n          }\n        }, 100);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to start face scanning\");\n    } finally {\n      setIsInitializing(false);\n    }\n  };\n\n  const captureFrame = async () => {\n    if (!videoRef.current || !streamRef.current) return;\n\n    try {\n      const faceDescriptor = await getFaceDescriptor(videoRef.current);\n      if (faceDescriptor) {\n        onFaceDetected(faceDescriptor);\n        handleClose();\n      } else {\n        setError(\"No face detected. Please position your face in the frame.\");\n      }\n    } catch (err) {\n      setError(\"Failed to capture face data\");\n    }\n  };\n\n  const handleClose = () => {\n    if (scanIntervalRef.current) {\n      clearInterval(scanIntervalRef.current);\n      scanIntervalRef.current = null;\n    }\n\n    if (streamRef.current) {\n      stopCamera(streamRef.current);\n      streamRef.current = null;\n    }\n\n    setIsScanning(false);\n    setFaceDetected(false);\n    setError(null);\n    onClose();\n  };\n\n  useEffect(() => {\n    if (isOpen && !isScanning && !isInitializing) {\n      startScanning();\n    }\n\n    return () => {\n      if (scanIntervalRef.current) {\n        clearInterval(scanIntervalRef.current);\n      }\n      if (streamRef.current) {\n        stopCamera(streamRef.current);\n      }\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"face-scanner-overlay active flex flex-col\" data-testid=\"face-scanner-overlay\">\n      {/* Camera Header */}\n      <div className=\"flex items-center justify-between p-4 text-white\">\n        <button \n          onClick={handleClose} \n          className=\"p-2 hover:bg-white/10 rounded-lg\"\n          data-testid=\"button-close-scanner\"\n        >\n          <X className=\"w-6 h-6\" />\n        </button>\n        <h3 className=\"font-semibold\">Face Recognition</h3>\n        <button className=\"p-2 hover:bg-white/10 rounded-lg\" data-testid=\"button-scanner-settings\">\n          <Settings className=\"w-6 h-6\" />\n        </button>\n      </div>\n\n      {/* Camera View */}\n      <div className=\"flex-1 flex items-center justify-center p-4\">\n        <div className=\"relative\">\n          {isScanning ? (\n            <div className=\"relative\">\n              <video\n                ref={videoRef}\n                autoPlay\n                muted\n                playsInline\n                className=\"w-80 h-80 bg-gray-800 rounded-xl border-4 border-white/20 object-cover\"\n                data-testid=\"video-camera\"\n              />\n              \n              {/* Face detection overlay */}\n              {faceDetected && (\n                <div \n                  className=\"absolute inset-0 border-2 border-green-400 rounded-xl animate-pulse\"\n                  data-testid=\"face-detected-overlay\"\n                />\n              )}\n              \n              {/* Corner indicators */}\n              <div className=\"absolute top-4 left-4 w-6 h-6 border-l-2 border-t-2 border-white\" />\n              <div className=\"absolute top-4 right-4 w-6 h-6 border-r-2 border-t-2 border-white\" />\n              <div className=\"absolute bottom-4 left-4 w-6 h-6 border-l-2 border-b-2 border-white\" />\n              <div className=\"absolute bottom-4 right-4 w-6 h-6 border-r-2 border-b-2 border-white\" />\n            </div>\n          ) : (\n            <div className=\"w-80 h-80 bg-gray-800 rounded-xl border-4 border-white/20 flex items-center justify-center\">\n              <div className=\"text-center text-white\">\n                {isInitializing ? (\n                  <>\n                    <div className=\"w-12 h-12 border-4 border-white border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n                    <p className=\"text-lg font-medium\">Initializing...</p>\n                    <p className=\"text-sm opacity-75 mt-2\">Loading face recognition models</p>\n                  </>\n                ) : error ? (\n                  <>\n                    <X className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                    <p className=\"text-lg font-medium\">Camera Error</p>\n                    <p className=\"text-sm opacity-75 mt-2\">{error}</p>\n                  </>\n                ) : (\n                  <>\n                    <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Camera className=\"w-8 h-8\" />\n                    </div>\n                    <p className=\"text-lg font-medium\">Position your face in the frame</p>\n                    <p className=\"text-sm opacity-75 mt-2\">Make sure you're in good lighting</p>\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Controls */}\n      <div className=\"p-6 text-center\">\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-500/20 border border-red-500/30 rounded-lg\">\n            <p className=\"text-red-200 text-sm\" data-testid=\"text-scanner-error\">{error}</p>\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-center space-x-4 mb-4\">\n          <button \n            onClick={captureFrame}\n            disabled={!isScanning || !faceDetected || isInitializing}\n            className={`w-16 h-16 rounded-full flex items-center justify-center text-white transition-colors ${\n              isScanning && faceDetected && !isInitializing\n                ? 'bg-green-500 hover:bg-green-600'\n                : 'bg-white/20 cursor-not-allowed'\n            }`}\n            data-testid=\"button-capture-face\"\n          >\n            <Camera className=\"w-6 h-6\" />\n          </button>\n        </div>\n        \n        <p className=\"text-white text-sm\">\n          {!isScanning ? 'Preparing camera...' : \n           faceDetected ? 'Face detected! Tap to capture' : \n           'Position your face in the frame'}\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7623},"client/src/components/Nav.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect, useState } from \"react\";\nimport { Home, Calendar, History, MessageCircle, FileText, CalendarCheck, Moon, Sun, Bell, LogOut } from \"lucide-react\";\n\nconst navItems = [\n  { id: 'home', path: '/', label: 'Home', icon: Home, mobileLabel: 'Home' },\n  { id: 'attendance', path: '/attendance', label: 'Mark Attendance', icon: CalendarCheck, mobileLabel: 'Attend' },\n  { id: 'history', path: '/history', label: 'Attendance History', icon: History, mobileLabel: 'History' },\n  { id: 'chat', path: '/chat', label: 'Chat Room', icon: MessageCircle, mobileLabel: 'Chat' },\n  { id: 'calendar', path: '/calendar', label: 'Calendar', icon: Calendar, mobileLabel: 'Calendar' },\n  { id: 'exams', path: '/exams', label: 'Exam Schedule', icon: FileText, mobileLabel: 'Exams' },\n];\n\nexport default function Nav() {\n  const { user, logout } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n      setIsDark(true);\n      document.documentElement.classList.add('dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newIsDark = !isDark;\n    setIsDark(newIsDark);\n    if (newIsDark) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  return (\n    <>\n      {/* Mobile Header */}\n      <header className=\"fixed top-0 left-0 right-0 bg-card border-b border-border z-50 md:relative\" data-testid=\"mobile-header\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <CalendarCheck className=\"w-4 h-4 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-lg font-semibold text-foreground\">AttendanceApp</h1>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={toggleTheme}\n              className=\"p-2 hover:bg-accent rounded-lg\"\n              data-testid=\"button-theme-toggle\"\n            >\n              {isDark ? <Sun className=\"w-4 h-4 text-muted-foreground\" /> : <Moon className=\"w-4 h-4 text-muted-foreground\" />}\n            </button>\n            <button className=\"p-2 hover:bg-accent rounded-lg\" data-testid=\"button-notifications\">\n              <Bell className=\"w-4 h-4 text-muted-foreground\" />\n            </button>\n            <button \n              onClick={() => logout()}\n              className=\"p-2 hover:bg-accent rounded-lg md:hidden\"\n              data-testid=\"button-logout-mobile\"\n            >\n              <LogOut className=\"w-4 h-4 text-muted-foreground\" />\n            </button>\n            <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n              <span className=\"text-xs font-medium text-secondary-foreground\" data-testid=\"text-user-initials\">\n                {user ? getInitials(user.fullName) : 'U'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Desktop Sidebar Navigation */}\n      <nav className=\"desktop-nav hidden md:block fixed left-0 top-0 bottom-0 w-64 bg-card border-r border-border z-40\" data-testid=\"desktop-nav\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center space-x-3 mb-8\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <CalendarCheck className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-foreground\">AttendanceApp</h1>\n              <p className=\"text-sm text-muted-foreground\">Student Portal</p>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2 mb-8\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.path;\n              \n              return (\n                <button\n                  key={item.id}\n                  onClick={() => setLocation(item.path)}\n                  className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors text-left ${\n                    isActive \n                      ? 'bg-primary text-primary-foreground' \n                      : 'hover:bg-accent text-muted-foreground'\n                  }`}\n                  data-testid={`nav-item-${item.id}`}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span>{item.label}</span>\n                </button>\n              );\n            })}\n          </div>\n\n          <div className=\"border-t border-border pt-4\">\n            <div className=\"flex items-center space-x-3 px-3 py-2 mb-2\">\n              <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                <span className=\"text-xs font-medium text-secondary-foreground\">\n                  {user ? getInitials(user.fullName) : 'U'}\n                </span>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"text-user-name\">\n                  {user?.fullName || 'User'}\n                </p>\n                <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"text-user-roll\">\n                  {user?.collegeRollNo || 'N/A'}\n                </p>\n              </div>\n            </div>\n            <button\n              onClick={() => logout()}\n              className=\"w-full flex items-center space-x-3 px-3 py-2 rounded-lg hover:bg-accent text-muted-foreground transition-colors text-left\"\n              data-testid=\"button-logout-desktop\"\n            >\n              <LogOut className=\"w-5 h-5\" />\n              <span>Logout</span>\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Mobile Bottom Navigation */}\n      <nav className=\"mobile-nav fixed bottom-0 left-0 right-0 bg-card border-t border-border md:hidden z-40\" data-testid=\"mobile-nav\">\n        <div className=\"grid grid-cols-5 h-16\">\n          {navItems.slice(0, 5).map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            \n            return (\n              <button\n                key={item.id}\n                onClick={() => setLocation(item.path)}\n                className={`flex flex-col items-center justify-center space-y-1 transition-colors ${\n                  isActive ? 'text-primary' : 'text-muted-foreground'\n                }`}\n                data-testid={`mobile-nav-item-${item.id}`}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span className=\"text-xs\">{item.mobileLabel}</span>\n              </button>\n            );\n          })}\n        </div>\n      </nav>\n    </>\n  );\n}\n","size_bytes":7346},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/login');\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":956},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport const useAuth = () => {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/me\", {\n          credentials: \"include\",\n        });\n        \n        if (response.status === 401) {\n          return null;\n        }\n        \n        if (!response.ok) {\n          return null;\n        }\n        \n        const data = await response.json();\n        return data.user;\n      } catch (error) {\n        return null;\n      }\n    },\n    retry: false,\n    staleTime: Infinity,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: api.auth.login,\n    onSuccess: async () => {\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Login failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: api.auth.logout,\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      queryClient.clear();\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: api.auth.register,\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Registration successful! Please login.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Registration failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login: loginMutation.mutate,\n    logout: logoutMutation.mutate,\n    register: registerMutation.mutate,\n    isLoginPending: loginMutation.isPending,\n    isRegisterPending: registerMutation.isPending,\n  };\n};\n","size_bytes":2250},"client/src/hooks/useGeoFence.ts":{"content":"import { useState, useEffect } from \"react\";\n\ninterface Position {\n  latitude: number;\n  longitude: number;\n}\n\ninterface GeofenceConfig {\n  center: Position;\n  radius: number; // in meters\n}\n\n// Default campus location (can be configured)\nconst DEFAULT_CAMPUS_GEOFENCE: GeofenceConfig = {\n  center: {\n    latitude: 28.6139, // New Delhi coordinates as example\n    longitude: 77.2090,\n  },\n  radius: 1000, // 1km radius\n};\n\nexport const useGeoFence = (geofence: GeofenceConfig = DEFAULT_CAMPUS_GEOFENCE) => {\n  const [position, setPosition] = useState<Position | null>(null);\n  const [isWithinGeofence, setIsWithinGeofence] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const calculateDistance = (pos1: Position, pos2: Position): number => {\n    const R = 6371e3; // Earth's radius in meters\n    const φ1 = (pos1.latitude * Math.PI) / 180;\n    const φ2 = (pos2.latitude * Math.PI) / 180;\n    const Δφ = ((pos2.latitude - pos1.latitude) * Math.PI) / 180;\n    const Δλ = ((pos2.longitude - pos1.longitude) * Math.PI) / 180;\n\n    const a =\n      Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n      Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c; // Distance in meters\n  };\n\n  const getCurrentPosition = (): Promise<Position> => {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error(\"Geolocation is not supported\"));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          });\n        },\n        (error) => {\n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              reject(new Error(\"Location access denied by user\"));\n              break;\n            case error.POSITION_UNAVAILABLE:\n              reject(new Error(\"Location information unavailable\"));\n              break;\n            case error.TIMEOUT:\n              reject(new Error(\"Location request timed out\"));\n              break;\n            default:\n              reject(new Error(\"Unknown location error\"));\n              break;\n          }\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 60000,\n        }\n      );\n    });\n  };\n\n  const checkGeofence = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const currentPosition = await getCurrentPosition();\n      setPosition(currentPosition);\n\n      const distance = calculateDistance(currentPosition, geofence.center);\n      const withinFence = distance <= geofence.radius;\n      \n      setIsWithinGeofence(withinFence);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Location check failed\");\n      setIsWithinGeofence(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    checkGeofence();\n  }, []);\n\n  return {\n    position,\n    isWithinGeofence,\n    error,\n    isLoading,\n    checkGeofence,\n    distance: position ? calculateDistance(position, geofence.center) : null,\n  };\n};\n","size_bytes":3299},"client/src/hooks/useSocket.ts":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useAuth } from \"./useAuth\";\n\ninterface ChatMessage {\n  id: string;\n  userId: string;\n  message: string;\n  room: string;\n  createdAt: string;\n}\n\nexport const useSocket = () => {\n  const { user } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [onlineCount, setOnlineCount] = useState(0);\n  const ws = useRef<WebSocket | null>(null);\n\n  const connect = () => {\n    if (!user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      console.log(\"WebSocket connected\");\n      setIsConnected(true);\n      \n      // Join with user ID\n      if (ws.current) {\n        ws.current.send(JSON.stringify({\n          type: 'join',\n          userId: user.id\n        }));\n      }\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        if (data.type === 'chat') {\n          setMessages(prev => [...prev, data.message]);\n        } else if (data.type === 'onlineCount') {\n          setOnlineCount(data.count);\n        }\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n      setIsConnected(false);\n      \n      // Attempt to reconnect after 3 seconds\n      setTimeout(() => {\n        if (user) {\n          connect();\n        }\n      }, 3000);\n    };\n\n    ws.current.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n      setIsConnected(false);\n    };\n  };\n\n  const sendMessage = (message: string, room: string = 'general') => {\n    if (ws.current?.readyState === WebSocket.OPEN && user) {\n      ws.current.send(JSON.stringify({\n        type: 'chat',\n        userId: user.id,\n        text: message,\n        room\n      }));\n    }\n  };\n\n  const disconnect = () => {\n    if (ws.current) {\n      ws.current.close();\n      ws.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (user) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [user]);\n\n  return {\n    isConnected,\n    messages,\n    onlineCount,\n    sendMessage,\n    connect,\n    disconnect,\n  };\n};\n","size_bytes":2416},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport const api = {\n  auth: {\n    login: (data: { collegeRollNo: string; password: string }) =>\n      apiRequest(\"POST\", \"/api/auth/login\", data),\n    register: (data: FormData) =>\n      apiRequest(\"POST\", \"/api/auth/register\", data),\n    logout: () => apiRequest(\"POST\", \"/api/auth/logout\"),\n    me: () => apiRequest(\"GET\", \"/api/auth/me\"),\n  },\n  \n  attendance: {\n    getRecords: (params?: { startDate?: string; endDate?: string }) => {\n      const query = new URLSearchParams(params).toString();\n      return apiRequest(\"GET\", `/api/attendance${query ? `?${query}` : \"\"}`);\n    },\n    create: (data: any) => apiRequest(\"POST\", \"/api/attendance\", data),\n    getStats: () => apiRequest(\"GET\", \"/api/attendance/stats\"),\n  },\n  \n  calendar: {\n    getEvents: (params?: { startDate?: string; endDate?: string }) => {\n      const query = new URLSearchParams(params).toString();\n      return apiRequest(\"GET\", `/api/calendar${query ? `?${query}` : \"\"}`);\n    },\n    create: (data: any) => apiRequest(\"POST\", \"/api/calendar\", data),\n  },\n  \n  exams: {\n    getSchedule: () => apiRequest(\"GET\", \"/api/exams\"),\n    create: (data: any) => apiRequest(\"POST\", \"/api/exams\", data),\n  },\n  \n  syllabus: {\n    getItems: () => apiRequest(\"GET\", \"/api/syllabus\"),\n    create: (data: any) => apiRequest(\"POST\", \"/api/syllabus\", data),\n  },\n  \n  chat: {\n    getMessages: (params?: { room?: string; limit?: number }) => {\n      const query = new URLSearchParams(params as any).toString();\n      return apiRequest(\"GET\", `/api/chat/messages${query ? `?${query}` : \"\"}`);\n    },\n  },\n  \n  user: {\n    updateFaceDescriptor: (data: { faceDescriptor: number[] }) =>\n      apiRequest(\"POST\", \"/api/user/face-descriptor\", data),\n  },\n};\n","size_bytes":1756},"client/src/lib/faceApi.ts":{"content":"import * as faceapi from 'face-api.js';\n\nlet isInitialized = false;\n\nexport const initializeFaceAPI = async (): Promise<void> => {\n  if (isInitialized) return;\n  \n  try {\n    // Load models from CDN\n    await Promise.all([\n      faceapi.nets.tinyFaceDetector.loadFromUri('/models'),\n      faceapi.nets.faceLandmark68Net.loadFromUri('/models'),\n      faceapi.nets.faceRecognitionNet.loadFromUri('/models'),\n      faceapi.nets.faceExpressionNet.loadFromUri('/models'),\n    ]);\n    \n    isInitialized = true;\n    console.log('Face-api.js models loaded successfully');\n  } catch (error) {\n    console.error('Error loading face-api.js models:', error);\n    throw error;\n  }\n};\n\nexport const detectFaceFromVideo = async (\n  video: HTMLVideoElement\n): Promise<faceapi.FaceDetection | null> => {\n  if (!isInitialized) {\n    await initializeFaceAPI();\n  }\n  \n  try {\n    const detection = await faceapi.detectSingleFace(\n      video,\n      new faceapi.TinyFaceDetectorOptions()\n    );\n    \n    return detection || null;\n  } catch (error) {\n    console.error('Error detecting face:', error);\n    return null;\n  }\n};\n\nexport const getFaceDescriptor = async (\n  video: HTMLVideoElement\n): Promise<Float32Array | null> => {\n  if (!isInitialized) {\n    await initializeFaceAPI();\n  }\n  \n  try {\n    const detection = await faceapi\n      .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())\n      .withFaceLandmarks()\n      .withFaceDescriptor();\n    \n    if (detection) {\n      return detection.descriptor;\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Error getting face descriptor:', error);\n    return null;\n  }\n};\n\nexport const compareFaceDescriptors = (\n  descriptor1: Float32Array,\n  descriptor2: Float32Array,\n  threshold: number = 0.6\n): boolean => {\n  try {\n    const distance = faceapi.euclideanDistance(descriptor1, descriptor2);\n    return distance < threshold;\n  } catch (error) {\n    console.error('Error comparing face descriptors:', error);\n    return false;\n  }\n};\n\nexport const startCamera = async (): Promise<MediaStream | null> => {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: {\n        width: { ideal: 640 },\n        height: { ideal: 480 },\n        facingMode: 'user'\n      }\n    });\n    \n    return stream;\n  } catch (error) {\n    console.error('Error accessing camera:', error);\n    return null;\n  }\n};\n\nexport const stopCamera = (stream: MediaStream): void => {\n  if (stream) {\n    stream.getTracks().forEach(track => track.stop());\n  }\n};\n","size_bytes":2522},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: isFormData ? {} : (data ? { \"Content-Type\": \"application/json\" } : {}),\n    body: isFormData ? data : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1475},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Attendance.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Nav from \"@/components/Nav\";\nimport FaceScanner from \"@/components/FaceScanner\";\nimport { useGeoFence } from \"@/hooks/useGeoFence\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Camera, MapPin, Check, X, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\nexport default function Attendance() {\n  const [selectedStatus, setSelectedStatus] = useState<'present' | 'absent' | 'leave' | null>(null);\n  const [reason, setReason] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [showFaceScanner, setShowFaceScanner] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { isWithinGeofence, isLoading: geoLoading, error: geoError, distance } = useGeoFence();\n\n  const attendanceMutation = useMutation({\n    mutationFn: api.attendance.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Attendance marked successfully\",\n      });\n      // Reset form\n      setSelectedStatus(null);\n      setReason(\"\");\n      setSubject(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to mark attendance\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleManualSubmit = () => {\n    if (!selectedStatus) {\n      toast({\n        title: \"Error\",\n        description: \"Please select attendance status\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    attendanceMutation.mutate({\n      status: selectedStatus,\n      subject: subject || null,\n      reason: reason || null,\n      method: 'manual',\n      verified: false,\n      date: new Date().toISOString(),\n    });\n  };\n\n  const handleFaceDetected = async (faceDescriptor: Float32Array) => {\n    try {\n      // Save face descriptor for future verification\n      await api.user.updateFaceDescriptor({\n        faceDescriptor: Array.from(faceDescriptor)\n      });\n\n      // Mark attendance with face recognition\n      attendanceMutation.mutate({\n        status: 'present',\n        subject: subject || null,\n        method: 'face_recognition',\n        verified: true,\n        date: new Date().toISOString(),\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process face recognition\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const currentDate = new Date().toLocaleDateString('en-US', { \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  });\n\n  const statusOptions = [\n    {\n      id: 'present',\n      label: 'Present',\n      icon: Check,\n      color: 'border-green-200 bg-green-50 text-green-700 hover:bg-green-100'\n    },\n    {\n      id: 'absent',\n      label: 'Absent',\n      icon: X,\n      color: 'border-red-200 bg-red-50 text-red-700 hover:bg-red-100'\n    },\n    {\n      id: 'leave',\n      label: 'Leave',\n      icon: Clock,\n      color: 'border-orange-200 bg-orange-50 text-orange-700 hover:bg-orange-100'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Nav />\n      \n      <main className=\"pt-16 pb-20 md:pt-0 md:pb-0 md:ml-64 min-h-screen\">\n        <div className=\"p-4 md:p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-2\">Mark Attendance</h2>\n              <p className=\"text-muted-foreground\" data-testid=\"text-current-date\">Today, {currentDate}</p>\n            </div>\n\n            {/* Subject Input */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Subject/Class</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter subject name (optional)\"\n                  value={subject}\n                  onChange={(e) => setSubject(e.target.value)}\n                  className=\"w-full p-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground\"\n                  data-testid=\"input-subject\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Location Status */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-semibold text-foreground\">Location Verification</h3>\n                  <Badge \n                    variant={isWithinGeofence ? \"default\" : \"destructive\"}\n                    data-testid=\"badge-location-status\"\n                  >\n                    {geoLoading ? \"Checking...\" : \n                     geoError ? \"Error\" :\n                     isWithinGeofence ? \"✓ On Campus\" : \"✗ Off Campus\"}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center space-x-3 text-sm text-muted-foreground\">\n                  <MapPin className=\"w-4 h-4\" />\n                  <span data-testid=\"text-location-info\">\n                    {geoError ? geoError :\n                     distance !== null ? `${Math.round(distance)}m from campus` :\n                     \"Getting location...\"}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Face Recognition Section */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-foreground mb-4\">Face Recognition</h3>\n                <div className=\"text-center\">\n                  <div className=\"w-48 h-48 mx-auto mb-4 bg-muted rounded-xl border-2 border-dashed border-border flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <Camera className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">Click to start camera</p>\n                    </div>\n                  </div>\n                  <Button \n                    onClick={() => setShowFaceScanner(true)}\n                    className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                    data-testid=\"button-start-face-scan\"\n                  >\n                    <Camera className=\"w-4 h-4 mr-2\" />\n                    Start Face Scan\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Manual Attendance */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-foreground mb-4\">Manual Attendance</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-3 gap-3\">\n                    {statusOptions.map((option) => {\n                      const Icon = option.icon;\n                      return (\n                        <button\n                          key={option.id}\n                          onClick={() => setSelectedStatus(option.id as any)}\n                          className={`p-4 rounded-lg border-2 transition-colors ${\n                            selectedStatus === option.id \n                              ? option.color + ' ring-2 ring-offset-2 ring-primary' \n                              : option.color\n                          }`}\n                          data-testid={`button-status-${option.id}`}\n                        >\n                          <Icon className=\"w-6 h-6 mx-auto mb-2\" />\n                          <p className=\"font-medium\">{option.label}</p>\n                        </button>\n                      );\n                    })}\n                  </div>\n                  \n                  {(selectedStatus === 'absent' || selectedStatus === 'leave') && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Reason {selectedStatus === 'leave' ? '(for leave)' : '(if absent)'}\n                      </label>\n                      <Textarea\n                        value={reason}\n                        onChange={(e) => setReason(e.target.value)}\n                        placeholder=\"Enter reason...\"\n                        rows={3}\n                        data-testid=\"textarea-reason\"\n                      />\n                    </div>\n                  )}\n                  \n                  <Button \n                    onClick={handleManualSubmit}\n                    disabled={!selectedStatus || attendanceMutation.isPending}\n                    className=\"w-full bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n                    data-testid=\"button-submit-attendance\"\n                  >\n                    {attendanceMutation.isPending ? \"Submitting...\" : \"Submit Attendance\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <FaceScanner\n        isOpen={showFaceScanner}\n        onClose={() => setShowFaceScanner(false)}\n        onFaceDetected={handleFaceDetected}\n      />\n    </div>\n  );\n}\n","size_bytes":9572},"client/src/pages/AttendanceHistory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Nav from \"@/components/Nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Filter, TrendingUp, Calendar, CalendarX, FileText } from \"lucide-react\";\n\nexport default function AttendanceHistory() {\n  const [filters, setFilters] = useState({\n    startDate: \"\",\n    endDate: \"\",\n    subject: \"\",\n  });\n\n  const { data: records, isLoading } = useQuery({\n    queryKey: [\"/api/attendance\", filters],\n    staleTime: 2 * 60 * 1000,\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/attendance/stats\"],\n    staleTime: 5 * 60 * 1000,\n  });\n\n  const attendanceStats = stats?.stats || {\n    totalPresent: 0,\n    totalAbsent: 0,\n    totalLeave: 0,\n    percentage: 0\n  };\n\n  const attendanceRecords = records?.records || [];\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  const exportToCSV = () => {\n    if (!attendanceRecords.length) return;\n\n    const headers = ['Date', 'Subject', 'Time', 'Status', 'Method', 'Location'];\n    const csvData = attendanceRecords.map((record: any) => [\n      new Date(record.date).toLocaleDateString(),\n      record.subject || 'N/A',\n      new Date(record.date).toLocaleTimeString(),\n      record.status,\n      record.method || 'N/A',\n      record.location || 'N/A'\n    ]);\n\n    const csvContent = [headers, ...csvData]\n      .map(row => row.map(field => `\"${field}\"`).join(','))\n      .join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'attendance_history.csv';\n    link.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      present: { label: 'Present', variant: 'default' as const, className: 'bg-green-100 text-green-700' },\n      absent: { label: 'Absent', variant: 'destructive' as const, className: 'bg-red-100 text-red-700' },\n      leave: { label: 'Leave', variant: 'secondary' as const, className: 'bg-orange-100 text-orange-700' },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.absent;\n    \n    return (\n      <span className={`px-2 py-1 rounded-full text-xs font-medium ${config.className}`}>\n        {config.label}\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Nav />\n      \n      <main className=\"pt-16 pb-20 md:pt-0 md:pb-0 md:ml-64 min-h-screen\">\n        <div className=\"p-4 md:p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-2\">Attendance History</h2>\n              <p className=\"text-muted-foreground\">View and export your attendance records</p>\n            </div>\n\n            {/* Filters */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div>\n                    <Label htmlFor=\"startDate\">From Date</Label>\n                    <Input\n                      id=\"startDate\"\n                      type=\"date\"\n                      value={filters.startDate}\n                      onChange={(e) => handleFilterChange('startDate', e.target.value)}\n                      data-testid=\"input-start-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"endDate\">To Date</Label>\n                    <Input\n                      id=\"endDate\"\n                      type=\"date\"\n                      value={filters.endDate}\n                      onChange={(e) => handleFilterChange('endDate', e.target.value)}\n                      data-testid=\"input-end-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Select onValueChange={(value) => handleFilterChange('subject', value)}>\n                      <SelectTrigger data-testid=\"select-subject\">\n                        <SelectValue placeholder=\"All Subjects\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">All Subjects</SelectItem>\n                        <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n                        <SelectItem value=\"Physics\">Physics</SelectItem>\n                        <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n                        <SelectItem value=\"Computer Science\">Computer Science</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex items-end space-x-2\">\n                    <Button \n                      className=\"flex-1\"\n                      data-testid=\"button-apply-filters\"\n                    >\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      Filter\n                    </Button>\n                    <Button \n                      variant=\"secondary\"\n                      onClick={exportToCSV}\n                      disabled={!attendanceRecords.length}\n                      data-testid=\"button-export-csv\"\n                    >\n                      <Download className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Summary Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n              <Card className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-present\">\n                      {attendanceStats.totalPresent}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Present</p>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-green-600\" />\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-absent\">\n                      {attendanceStats.totalAbsent}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Absent</p>\n                  </div>\n                  <CalendarX className=\"w-8 h-8 text-red-600\" />\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-total-leave\">\n                      {attendanceStats.totalLeave}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Leave</p>\n                  </div>\n                  <FileText className=\"w-8 h-8 text-orange-600\" />\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-attendance-percentage\">\n                      {attendanceStats.percentage}%\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Percentage</p>\n                  </div>\n                  <Calendar className=\"w-8 h-8 text-blue-600\" />\n                </div>\n              </Card>\n            </div>\n\n            {/* Attendance Table */}\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"p-6 border-b border-border\">\n                  <h3 className=\"font-semibold text-foreground\">Attendance Records</h3>\n                </div>\n                \n                {isLoading ? (\n                  <div className=\"p-8 text-center\">\n                    <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                    <p className=\"text-muted-foreground\">Loading records...</p>\n                  </div>\n                ) : attendanceRecords.length > 0 ? (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-muted\">\n                        <tr>\n                          <th className=\"text-left p-4 font-medium text-foreground\">Date</th>\n                          <th className=\"text-left p-4 font-medium text-foreground\">Subject</th>\n                          <th className=\"text-left p-4 font-medium text-foreground\">Time</th>\n                          <th className=\"text-left p-4 font-medium text-foreground\">Status</th>\n                          <th className=\"text-left p-4 font-medium text-foreground\">Method</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {attendanceRecords.map((record: any, index: number) => (\n                          <tr key={record.id} className=\"border-b border-border\" data-testid={`record-row-${index}`}>\n                            <td className=\"p-4 text-foreground\">\n                              {new Date(record.date).toLocaleDateString()}\n                            </td>\n                            <td className=\"p-4 text-foreground\">\n                              {record.subject || 'N/A'}\n                            </td>\n                            <td className=\"p-4 text-muted-foreground\">\n                              {new Date(record.date).toLocaleTimeString()}\n                            </td>\n                            <td className=\"p-4\">\n                              {getStatusBadge(record.status)}\n                            </td>\n                            <td className=\"p-4 text-muted-foreground\">\n                              {record.method === 'face_recognition' ? 'Face Recognition' : \n                               record.method === 'manual' ? 'Manual' : \n                               record.method || 'N/A'}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div className=\"p-8 text-center\" data-testid=\"empty-records\">\n                    <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"font-medium text-foreground mb-2\">No attendance records found</h3>\n                    <p className=\"text-muted-foreground\">Start marking your attendance to see records here</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":11480},"client/src/pages/Calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Nav from \"@/components/Nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, ChevronLeft, ChevronRight, Calendar as CalendarIcon, FlaskConical, FileText, Users } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  description?: string;\n  date: string;\n  endDate?: string;\n  type: 'event' | 'holiday' | 'exam';\n  createdBy?: string;\n  createdAt: string;\n}\n\nexport default function Calendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [isAddEventOpen, setIsAddEventOpen] = useState(false);\n  const [newEvent, setNewEvent] = useState({\n    title: \"\",\n    description: \"\",\n    date: \"\",\n    endDate: \"\",\n    type: \"event\" as const,\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch calendar events\n  const { data: eventsData, isLoading } = useQuery({\n    queryKey: [\"/api/calendar\"],\n    staleTime: 2 * 60 * 1000,\n  });\n\n  const events: CalendarEvent[] = eventsData?.events || [];\n\n  const createEventMutation = useMutation({\n    mutationFn: api.calendar.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully\",\n      });\n      setIsAddEventOpen(false);\n      setNewEvent({\n        title: \"\",\n        description: \"\",\n        date: \"\",\n        endDate: \"\",\n        type: \"event\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateEvent = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newEvent.title || !newEvent.date) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createEventMutation.mutate({\n      ...newEvent,\n      date: new Date(newEvent.date).toISOString(),\n      endDate: newEvent.endDate ? new Date(newEvent.endDate).toISOString() : undefined,\n    });\n  };\n\n  const getDaysInMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  };\n\n  const getFirstDayOfMonth = (date: Date) => {\n    return new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n  };\n\n  const previousMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));\n  };\n\n  const getEventsForDate = (day: number) => {\n    const dateStr = new Date(currentDate.getFullYear(), currentDate.getMonth(), day)\n      .toISOString().split('T')[0];\n    \n    return events.filter(event => {\n      const eventDate = new Date(event.date).toISOString().split('T')[0];\n      return eventDate === dateStr;\n    });\n  };\n\n  const getEventTypeIcon = (type: string) => {\n    switch (type) {\n      case 'exam':\n        return <FileText className=\"w-4 h-4\" />;\n      case 'holiday':\n        return <CalendarIcon className=\"w-4 h-4\" />;\n      default:\n        return <FlaskConical className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getEventTypeBadge = (type: string) => {\n    const config = {\n      event: { label: 'Event', className: 'bg-green-100 text-green-700' },\n      exam: { label: 'Exam', className: 'bg-red-100 text-red-700' },\n      holiday: { label: 'Holiday', className: 'bg-blue-100 text-blue-700' },\n    };\n    \n    const eventConfig = config[type as keyof typeof config] || config.event;\n    \n    return (\n      <span className={`text-xs px-2 py-1 rounded-full ${eventConfig.className}`}>\n        {eventConfig.label}\n      </span>\n    );\n  };\n\n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const daysInMonth = getDaysInMonth(currentDate);\n  const firstDay = getFirstDayOfMonth(currentDate);\n  const today = new Date();\n  const isCurrentMonth = currentDate.getMonth() === today.getMonth() && \n                         currentDate.getFullYear() === today.getFullYear();\n\n  // Create calendar grid\n  const calendarDays = [];\n  \n  // Empty cells for days before the first day of the month\n  for (let i = 0; i < firstDay; i++) {\n    calendarDays.push(null);\n  }\n  \n  // Days of the month\n  for (let day = 1; day <= daysInMonth; day++) {\n    calendarDays.push(day);\n  }\n\n  // Upcoming events (next 7 days)\n  const upcomingEvents = events\n    .filter(event => {\n      const eventDate = new Date(event.date);\n      const now = new Date();\n      const weekFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n      return eventDate >= now && eventDate <= weekFromNow;\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n    .slice(0, 5);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Nav />\n      \n      <main className=\"pt-16 pb-20 md:pt-0 md:pb-0 md:ml-64 min-h-screen\">\n        <div className=\"p-4 md:p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground\">College Calendar</h2>\n                  <p className=\"text-muted-foreground\">Upcoming events and important dates</p>\n                </div>\n                <Dialog open={isAddEventOpen} onOpenChange={setIsAddEventOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-add-event\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Event\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Add New Event</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleCreateEvent} className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"title\">Event Title *</Label>\n                        <Input\n                          id=\"title\"\n                          value={newEvent.title}\n                          onChange={(e) => setNewEvent(prev => ({ ...prev, title: e.target.value }))}\n                          placeholder=\"Enter event title\"\n                          required\n                          data-testid=\"input-event-title\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"description\">Description</Label>\n                        <Textarea\n                          id=\"description\"\n                          value={newEvent.description}\n                          onChange={(e) => setNewEvent(prev => ({ ...prev, description: e.target.value }))}\n                          placeholder=\"Enter event description\"\n                          data-testid=\"textarea-event-description\"\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"date\">Start Date *</Label>\n                          <Input\n                            id=\"date\"\n                            type=\"datetime-local\"\n                            value={newEvent.date}\n                            onChange={(e) => setNewEvent(prev => ({ ...prev, date: e.target.value }))}\n                            required\n                            data-testid=\"input-event-date\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"endDate\">End Date</Label>\n                          <Input\n                            id=\"endDate\"\n                            type=\"datetime-local\"\n                            value={newEvent.endDate}\n                            onChange={(e) => setNewEvent(prev => ({ ...prev, endDate: e.target.value }))}\n                            data-testid=\"input-event-end-date\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"type\">Event Type</Label>\n                        <Select value={newEvent.type} onValueChange={(value: any) => setNewEvent(prev => ({ ...prev, type: value }))}>\n                          <SelectTrigger data-testid=\"select-event-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"event\">Event</SelectItem>\n                            <SelectItem value=\"exam\">Exam</SelectItem>\n                            <SelectItem value=\"holiday\">Holiday</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div className=\"flex space-x-2\">\n                        <Button \n                          type=\"submit\" \n                          disabled={createEventMutation.isPending}\n                          data-testid=\"button-create-event\"\n                        >\n                          {createEventMutation.isPending ? \"Creating...\" : \"Create Event\"}\n                        </Button>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsAddEventOpen(false)}\n                          data-testid=\"button-cancel-event\"\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n\n            {/* Calendar View */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-calendar-month\">\n                    {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n                  </h3>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={previousMonth} data-testid=\"button-previous-month\">\n                      <ChevronLeft className=\"w-4 h-4\" />\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" onClick={nextMonth} data-testid=\"button-next-month\">\n                      <ChevronRight className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                {/* Calendar Grid */}\n                <div className=\"grid grid-cols-7 gap-1 mb-4\">\n                  {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                    <div key={day} className=\"p-2 text-center text-sm font-medium text-muted-foreground\">\n                      {day}\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"grid grid-cols-7 gap-1\">\n                  {calendarDays.map((day, index) => {\n                    if (day === null) {\n                      return <div key={index} className=\"aspect-square p-2\" />;\n                    }\n                    \n                    const dayEvents = getEventsForDate(day);\n                    const isToday = isCurrentMonth && day === today.getDate();\n                    \n                    return (\n                      <div\n                        key={day}\n                        className={`aspect-square p-2 text-center text-sm border border-border hover:bg-accent cursor-pointer ${\n                          isToday ? 'bg-primary text-primary-foreground font-medium' : 'text-foreground'\n                        }`}\n                        data-testid={`calendar-day-${day}`}\n                      >\n                        <div className=\"font-medium\">{day}</div>\n                        {dayEvents.length > 0 && (\n                          <div className=\"mt-1\">\n                            {dayEvents.slice(0, 2).map((event, eventIndex) => (\n                              <div key={eventIndex} className=\"w-1 h-1 bg-red-500 rounded-full mx-auto mb-1\" />\n                            ))}\n                            {dayEvents.length > 2 && (\n                              <div className=\"text-xs text-muted-foreground\">+{dayEvents.length - 2}</div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Upcoming Events */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-foreground mb-4\">Upcoming Events</h3>\n                {isLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                    <p className=\"text-muted-foreground\">Loading events...</p>\n                  </div>\n                ) : upcomingEvents.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {upcomingEvents.map((event, index) => (\n                      <div \n                        key={event.id} \n                        className=\"flex items-center space-x-4 p-4 border border-border rounded-lg\"\n                        data-testid={`upcoming-event-${index}`}\n                      >\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          {getEventTypeIcon(event.type)}\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground\">{event.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(event.date).toLocaleDateString('en-US', {\n                              weekday: 'long',\n                              year: 'numeric',\n                              month: 'long',\n                              day: 'numeric'\n                            })}\n                          </p>\n                          {event.description && (\n                            <p className=\"text-sm text-muted-foreground mt-1\">{event.description}</p>\n                          )}\n                        </div>\n                        {getEventTypeBadge(event.type)}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\" data-testid=\"empty-events\">\n                    <CalendarIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"font-medium text-foreground mb-2\">No upcoming events</h3>\n                    <p className=\"text-muted-foreground\">Add your first event to get started</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":16203},"client/src/pages/ChatRoom.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Nav from \"@/components/Nav\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSocket } from \"@/hooks/useSocket\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Send, Users } from \"lucide-react\";\n\ninterface ChatMessageType {\n  id: string;\n  userId: string;\n  message: string;\n  room: string;\n  createdAt: string;\n  user?: {\n    fullName: string;\n    collegeRollNo: string;\n  };\n}\n\nexport default function ChatRoom() {\n  const { user } = useAuth();\n  const [messageText, setMessageText] = useState(\"\");\n  const [room] = useState(\"general\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \n  const { isConnected, messages: socketMessages, onlineCount, sendMessage } = useSocket();\n\n  // Fetch initial messages\n  const { data: initialMessages } = useQuery({\n    queryKey: [\"/api/chat/messages\", { room, limit: 50 }],\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  // Combine initial messages with real-time messages\n  const allMessages = [...(initialMessages?.messages || []), ...socketMessages];\n\n  // Remove duplicates based on message content and timestamp\n  const uniqueMessages = allMessages.filter((message, index, array) => \n    array.findIndex(m => \n      m.message === message.message && \n      Math.abs(new Date(m.createdAt).getTime() - new Date(message.createdAt).getTime()) < 1000\n    ) === index\n  );\n\n  // Sort messages by creation time\n  const sortedMessages = uniqueMessages.sort(\n    (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n  );\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [sortedMessages]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!messageText.trim() || !isConnected) return;\n\n    sendMessage(messageText.trim(), room);\n    setMessageText(\"\");\n  };\n\n  const getInitials = (name: string) => {\n    return name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U';\n  };\n\n  const getMessageTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  const isMyMessage = (message: ChatMessageType) => {\n    return message.userId === user?.id;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Nav />\n      \n      <main className=\"pt-16 pb-20 md:pt-0 md:pb-0 md:ml-64 min-h-screen\">\n        <div className=\"p-4 md:p-6 h-full\">\n          <div className=\"max-w-4xl mx-auto h-full flex flex-col\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground\">Chat Room</h2>\n                  <p className=\"text-muted-foreground\">General Discussion</p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />\n                  <span className=\"text-sm text-muted-foreground\" data-testid=\"text-connection-status\">\n                    {isConnected ? `${onlineCount || 0} online` : 'Disconnected'}\n                  </span>\n                  <Users className=\"w-4 h-4 text-muted-foreground\" />\n                </div>\n              </div>\n            </div>\n\n            {/* Chat Messages */}\n            <Card className=\"flex-1 flex flex-col\">\n              <CardContent className=\"flex-1 flex flex-col p-0\">\n                <div className=\"flex-1 p-4 space-y-4 overflow-y-auto max-h-[calc(100vh-300px)]\" data-testid=\"chat-messages\">\n                  {sortedMessages.length > 0 ? (\n                    sortedMessages.map((message: ChatMessageType, index) => (\n                      <div\n                        key={`${message.id}-${index}`}\n                        className={`flex space-x-3 ${isMyMessage(message) ? 'justify-end' : ''}`}\n                        data-testid={`message-${index}`}\n                      >\n                        {!isMyMessage(message) && (\n                          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                            <span className=\"text-xs font-medium text-primary-foreground\">\n                              {getInitials(message.user?.fullName || 'Unknown')}\n                            </span>\n                          </div>\n                        )}\n                        \n                        <div className={`flex-1 ${isMyMessage(message) ? 'max-w-xs' : ''}`}>\n                          {!isMyMessage(message) && (\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <span className=\"font-medium text-foreground text-sm\">\n                                {message.user?.fullName || 'Unknown User'}\n                              </span>\n                              <span className=\"text-xs text-muted-foreground\">\n                                {getMessageTime(message.createdAt)}\n                              </span>\n                            </div>\n                          )}\n                          \n                          <div className={`p-3 rounded-lg ${\n                            isMyMessage(message) \n                              ? 'bg-primary text-primary-foreground ml-auto' \n                              : 'bg-muted text-foreground'\n                          }`}>\n                            <p className=\"text-sm\">{message.message}</p>\n                            {isMyMessage(message) && (\n                              <div className=\"flex justify-end mt-1\">\n                                <span className=\"text-xs opacity-70\">\n                                  {getMessageTime(message.createdAt)}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n\n                        {isMyMessage(message) && (\n                          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0\">\n                            <span className=\"text-xs font-medium text-secondary-foreground\">\n                              {getInitials(user?.fullName || 'You')}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\" data-testid=\"empty-messages\">\n                      <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <Send className=\"w-8 h-8 text-muted-foreground\" />\n                      </div>\n                      <h3 className=\"font-medium text-foreground mb-2\">No messages yet</h3>\n                      <p className=\"text-muted-foreground\">Start the conversation by sending a message</p>\n                    </div>\n                  )}\n                  <div ref={messagesEndRef} />\n                </div>\n\n                {/* Chat Input */}\n                <div className=\"p-4 border-t border-border\">\n                  <form onSubmit={handleSendMessage} className=\"flex space-x-3\">\n                    <Input\n                      type=\"text\"\n                      placeholder={isConnected ? \"Type your message...\" : \"Connecting...\"}\n                      value={messageText}\n                      onChange={(e) => setMessageText(e.target.value)}\n                      disabled={!isConnected}\n                      className=\"flex-1\"\n                      data-testid=\"input-message\"\n                    />\n                    <Button \n                      type=\"submit\"\n                      disabled={!messageText.trim() || !isConnected}\n                      data-testid=\"button-send-message\"\n                    >\n                      <Send className=\"w-4 h-4\" />\n                    </Button>\n                  </form>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8422},"client/src/pages/ExamSchedule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Nav from \"@/components/Nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Calendar, Clock, MapPin, Edit, Bell, FileText } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\ninterface ExamScheduleItem {\n  id: string;\n  subject: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  location: string;\n  instructions?: string;\n  createdAt: string;\n}\n\nexport default function ExamSchedule() {\n  const [isAddExamOpen, setIsAddExamOpen] = useState(false);\n  const [newExam, setNewExam] = useState({\n    subject: \"\",\n    date: \"\",\n    startTime: \"\",\n    endTime: \"\",\n    location: \"\",\n    instructions: \"\",\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch exam schedule\n  const { data: examsData, isLoading } = useQuery({\n    queryKey: [\"/api/exams\"],\n    staleTime: 5 * 60 * 1000,\n  });\n\n  const exams: ExamScheduleItem[] = examsData?.exams || [];\n\n  const createExamMutation = useMutation({\n    mutationFn: api.exams.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exams\"] });\n      toast({\n        title: \"Success\",\n        description: \"Exam added successfully\",\n      });\n      setIsAddExamOpen(false);\n      setNewExam({\n        subject: \"\",\n        date: \"\",\n        startTime: \"\",\n        endTime: \"\",\n        location: \"\",\n        instructions: \"\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add exam\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateExam = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newExam.subject || !newExam.date || !newExam.startTime || !newExam.endTime || !newExam.location) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createExamMutation.mutate({\n      ...newExam,\n      date: new Date(newExam.date).toISOString(),\n    });\n  };\n\n  const getExamStatus = (examDate: string) => {\n    const today = new Date();\n    const exam = new Date(examDate);\n    const diffTime = exam.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    if (diffDays < 0) {\n      return { label: 'Completed', className: 'bg-gray-100 text-gray-700' };\n    } else if (diffDays === 0) {\n      return { label: 'Today', className: 'bg-red-100 text-red-700' };\n    } else if (diffDays <= 7) {\n      return { label: 'This Week', className: 'bg-orange-100 text-orange-700' };\n    } else {\n      return { label: 'Upcoming', className: 'bg-blue-100 text-blue-700' };\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const formatTime = (timeString: string) => {\n    return new Date(`1970-01-01T${timeString}`).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  // Sort exams by date\n  const sortedExams = exams.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n  // Separate upcoming and past exams\n  const today = new Date();\n  const upcomingExams = sortedExams.filter(exam => new Date(exam.date) >= today);\n  const pastExams = sortedExams.filter(exam => new Date(exam.date) < today);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Nav />\n      \n      <main className=\"pt-16 pb-20 md:pt-0 md:pb-0 md:ml-64 min-h-screen\">\n        <div className=\"p-4 md:p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground\">Exam Schedule</h2>\n                  <p className=\"text-muted-foreground\">View and manage exam schedules</p>\n                </div>\n                <Dialog open={isAddExamOpen} onOpenChange={setIsAddExamOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-add-exam\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Exam\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Add New Exam</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleCreateExam} className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"subject\">Subject *</Label>\n                        <Input\n                          id=\"subject\"\n                          value={newExam.subject}\n                          onChange={(e) => setNewExam(prev => ({ ...prev, subject: e.target.value }))}\n                          placeholder=\"Enter subject name\"\n                          required\n                          data-testid=\"input-exam-subject\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"date\">Exam Date *</Label>\n                        <Input\n                          id=\"date\"\n                          type=\"date\"\n                          value={newExam.date}\n                          onChange={(e) => setNewExam(prev => ({ ...prev, date: e.target.value }))}\n                          required\n                          data-testid=\"input-exam-date\"\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"startTime\">Start Time *</Label>\n                          <Input\n                            id=\"startTime\"\n                            type=\"time\"\n                            value={newExam.startTime}\n                            onChange={(e) => setNewExam(prev => ({ ...prev, startTime: e.target.value }))}\n                            required\n                            data-testid=\"input-exam-start-time\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"endTime\">End Time *</Label>\n                          <Input\n                            id=\"endTime\"\n                            type=\"time\"\n                            value={newExam.endTime}\n                            onChange={(e) => setNewExam(prev => ({ ...prev, endTime: e.target.value }))}\n                            required\n                            data-testid=\"input-exam-end-time\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"location\">Location *</Label>\n                        <Input\n                          id=\"location\"\n                          value={newExam.location}\n                          onChange={(e) => setNewExam(prev => ({ ...prev, location: e.target.value }))}\n                          placeholder=\"e.g., Hall A, Block 1\"\n                          required\n                          data-testid=\"input-exam-location\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"instructions\">Instructions</Label>\n                        <Textarea\n                          id=\"instructions\"\n                          value={newExam.instructions}\n                          onChange={(e) => setNewExam(prev => ({ ...prev, instructions: e.target.value }))}\n                          placeholder=\"Special instructions for the exam\"\n                          data-testid=\"textarea-exam-instructions\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex space-x-2\">\n                        <Button \n                          type=\"submit\" \n                          disabled={createExamMutation.isPending}\n                          data-testid=\"button-create-exam\"\n                        >\n                          {createExamMutation.isPending ? \"Adding...\" : \"Add Exam\"}\n                        </Button>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsAddExamOpen(false)}\n                          data-testid=\"button-cancel-exam\"\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">Loading exam schedule...</p>\n              </div>\n            ) : (\n              <>\n                {/* Upcoming Exams */}\n                {upcomingExams.length > 0 && (\n                  <div className=\"mb-8\">\n                    <h3 className=\"text-lg font-semibold text-foreground mb-4\">Upcoming Exams</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {upcomingExams.map((exam, index) => {\n                        const status = getExamStatus(exam.date);\n                        \n                        return (\n                          <Card key={exam.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`exam-card-${index}`}>\n                            <CardContent className=\"p-6\">\n                              <div className=\"flex items-center justify-between mb-4\">\n                                <h3 className=\"font-semibold text-foreground\">{exam.subject}</h3>\n                                <span className={`text-xs px-2 py-1 rounded-full ${status.className}`}>\n                                  {status.label}\n                                </span>\n                              </div>\n                              \n                              <div className=\"space-y-3\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                                  <span className=\"text-sm text-foreground\">{formatDate(exam.date)}</span>\n                                </div>\n                                \n                                <div className=\"flex items-center space-x-3\">\n                                  <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                                  <span className=\"text-sm text-foreground\">\n                                    {formatTime(exam.startTime)} - {formatTime(exam.endTime)}\n                                  </span>\n                                </div>\n                                \n                                <div className=\"flex items-center space-x-3\">\n                                  <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                                  <span className=\"text-sm text-foreground\">{exam.location}</span>\n                                </div>\n                                \n                                {exam.instructions && (\n                                  <div className=\"mt-3 p-3 bg-muted rounded-lg\">\n                                    <p className=\"text-sm text-muted-foreground\">{exam.instructions}</p>\n                                  </div>\n                                )}\n                              </div>\n                              \n                              <div className=\"mt-4 pt-4 border-t border-border\">\n                                <div className=\"flex space-x-2\">\n                                  <Button \n                                    variant=\"outline\" \n                                    size=\"sm\" \n                                    className=\"flex-1\"\n                                    data-testid={`button-edit-exam-${index}`}\n                                  >\n                                    <Edit className=\"w-4 h-4 mr-1\" />\n                                    Edit\n                                  </Button>\n                                  <Button \n                                    variant=\"secondary\" \n                                    size=\"sm\" \n                                    className=\"flex-1\"\n                                    data-testid={`button-remind-exam-${index}`}\n                                  >\n                                    <Bell className=\"w-4 h-4 mr-1\" />\n                                    Remind\n                                  </Button>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n\n                {/* Past Exams */}\n                {pastExams.length > 0 && (\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-4\">Past Exams</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {pastExams.slice(0, 6).map((exam, index) => (\n                        <Card key={exam.id} className=\"opacity-75\" data-testid={`past-exam-card-${index}`}>\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-center justify-between mb-4\">\n                              <h3 className=\"font-semibold text-foreground\">{exam.subject}</h3>\n                              <span className=\"text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-700\">\n                                Completed\n                              </span>\n                            </div>\n                            \n                            <div className=\"space-y-3\">\n                              <div className=\"flex items-center space-x-3\">\n                                <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                                <span className=\"text-sm text-foreground\">{formatDate(exam.date)}</span>\n                              </div>\n                              \n                              <div className=\"flex items-center space-x-3\">\n                                <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                                <span className=\"text-sm text-foreground\">{exam.location}</span>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Empty State */}\n                {exams.length === 0 && (\n                  <div className=\"text-center py-12\" data-testid=\"empty-exams\">\n                    <FileText className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">No exams scheduled</h3>\n                    <p className=\"text-muted-foreground mb-6\">Add your first exam to get started</p>\n                    <Button onClick={() => setIsAddExamOpen(true)}>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Exam\n                    </Button>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":16472},"client/src/pages/Home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport Nav from \"@/components/Nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Camera, History, MessageCircle, TrendingUp, Calendar, CalendarX, FileText } from \"lucide-react\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Fetch attendance stats\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/attendance/stats\"],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Fetch recent attendance records\n  const { data: recentRecords } = useQuery({\n    queryKey: [\"/api/attendance\"],\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  const attendanceStats = stats?.stats || {\n    totalPresent: 0,\n    totalAbsent: 0,\n    totalLeave: 0,\n    percentage: 0\n  };\n\n  const currentDate = new Date().toLocaleDateString('en-US', { \n    year: 'numeric', \n    month: 'short', \n    day: 'numeric' \n  });\n\n  const quickActions = [\n    {\n      title: \"Mark Attendance\",\n      description: \"Use face recognition\",\n      icon: Camera,\n      color: \"bg-primary\",\n      path: \"/attendance\"\n    },\n    {\n      title: \"View History\",\n      description: \"Check past records\",\n      icon: History,\n      color: \"bg-secondary\",\n      path: \"/history\"\n    },\n    {\n      title: \"Chat Room\",\n      description: \"Connect with peers\",\n      icon: MessageCircle,\n      color: \"bg-green-500\",\n      path: \"/chat\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Nav />\n      \n      {/* Main Content Area */}\n      <main className=\"pt-16 pb-20 md:pt-0 md:pb-0 md:ml-64 min-h-screen\">\n        <div className=\"p-4 md:p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            {/* Welcome Section */}\n            <div className=\"bg-card rounded-xl p-6 mb-6 border border-border\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-foreground mb-1\" data-testid=\"text-welcome\">\n                    Welcome back, {user?.fullName || 'Student'}!\n                  </h2>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-roll-number\">\n                    Roll No: {user?.collegeRollNo || 'N/A'}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-muted-foreground\">Today</p>\n                  <p className=\"text-lg font-medium text-foreground\" data-testid=\"text-current-date\">\n                    {currentDate}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n              <Card className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-attendance-percentage\">\n                      {attendanceStats.percentage}%\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Attendance</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-present-days\">\n                      {attendanceStats.totalPresent}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Present Days</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-absent-days\">\n                      {attendanceStats.totalAbsent}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Absent Days</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <CalendarX className=\"w-5 h-5 text-red-600\" />\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-leave-days\">\n                      {attendanceStats.totalLeave}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Leave Days</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"w-5 h-5 text-orange-600\" />\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n              {quickActions.map((action, index) => {\n                const Icon = action.icon;\n                return (\n                  <button\n                    key={index}\n                    onClick={() => setLocation(action.path)}\n                    className=\"bg-card rounded-xl p-6 border border-border hover:shadow-lg transition-shadow text-left group\"\n                    data-testid={`button-quick-action-${action.path.replace('/', '')}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-12 h-12 ${action.color} rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform`}>\n                        <Icon className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-foreground\">{action.title}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{action.description}</p>\n                      </div>\n                    </div>\n                  </button>\n                );\n              })}\n            </div>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Recent Activity</h3>\n                <div className=\"space-y-4\">\n                  {recentRecords?.records?.slice(0, 3).length > 0 ? (\n                    recentRecords.records.slice(0, 3).map((record: any, index: number) => (\n                      <div key={record.id} className=\"flex items-center space-x-4\" data-testid={`activity-record-${index}`}>\n                        <div className={`w-2 h-2 rounded-full ${\n                          record.status === 'present' ? 'bg-green-500' : \n                          record.status === 'absent' ? 'bg-red-500' : 'bg-orange-500'\n                        }`} />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium text-foreground\">\n                            Attendance marked for {record.subject || 'Class'}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(record.date).toLocaleDateString()} at {new Date(record.date).toLocaleTimeString()}\n                          </p>\n                        </div>\n                        <span className={`text-xs px-2 py-1 rounded-full ${\n                          record.status === 'present' ? 'bg-green-100 text-green-700' :\n                          record.status === 'absent' ? 'bg-red-100 text-red-700' :\n                          'bg-orange-100 text-orange-700'\n                        }`}>\n                          {record.status.charAt(0).toUpperCase() + record.status.slice(1)}\n                        </span>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\" data-testid=\"empty-activity\">\n                      <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">No recent activity</p>\n                      <p className=\"text-sm text-muted-foreground\">Mark your first attendance to see activity here</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9154},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { CalendarCheck } from \"lucide-react\";\n\nexport default function Login() {\n  const [formData, setFormData] = useState({\n    collegeRollNo: \"\",\n    password: \"\",\n  });\n  const { login, isLoginPending, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation('/');\n    return null;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        setLocation('/');\n      } else {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-xl flex items-center justify-center mx-auto mb-4\">\n            <CalendarCheck className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Welcome Back</CardTitle>\n          <p className=\"text-muted-foreground\">Sign in to your student account</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"collegeRollNo\">College Roll Number</Label>\n              <Input\n                id=\"collegeRollNo\"\n                name=\"collegeRollNo\"\n                type=\"text\"\n                placeholder=\"Enter your roll number\"\n                value={formData.collegeRollNo}\n                onChange={handleChange}\n                required\n                data-testid=\"input-roll-number\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={formData.password}\n                onChange={handleChange}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoginPending}\n              data-testid=\"button-login\"\n            >\n              {isLoginPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <button\n                onClick={() => setLocation('/register')}\n                className=\"text-primary hover:underline font-medium\"\n                data-testid=\"link-register\"\n              >\n                Register here\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3855},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { CalendarCheck } from \"lucide-react\";\n\nexport default function Register() {\n  const [formData, setFormData] = useState({\n    collegeRollNo: \"\",\n    fullName: \"\",\n    studentPhone: \"\",\n    parentPhone: \"\",\n    studentEmail: \"\",\n    parentEmail: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [idPhoto, setIdPhoto] = useState<File | null>(null);\n  const { register, isRegisterPending, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation('/');\n    return null;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      alert(\"Passwords do not match\");\n      return;\n    }\n\n    const formDataToSend = new FormData();\n    Object.entries(formData).forEach(([key, value]) => {\n      if (key !== 'confirmPassword') {\n        formDataToSend.append(key, value);\n      }\n    });\n    \n    if (idPhoto) {\n      formDataToSend.append('idPhoto', idPhoto);\n    }\n\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        credentials: 'include',\n        body: formDataToSend,\n      });\n\n      if (response.ok) {\n        setLocation('/login');\n      } else {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      setIdPhoto(e.target.files[0]);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-xl flex items-center justify-center mx-auto mb-4\">\n            <CalendarCheck className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Create Account</CardTitle>\n          <p className=\"text-muted-foreground\">Register for student attendance system</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"collegeRollNo\">College Roll Number *</Label>\n                <Input\n                  id=\"collegeRollNo\"\n                  name=\"collegeRollNo\"\n                  type=\"text\"\n                  placeholder=\"CS2021001\"\n                  value={formData.collegeRollNo}\n                  onChange={handleChange}\n                  required\n                  data-testid=\"input-roll-number\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Full Name *</Label>\n                <Input\n                  id=\"fullName\"\n                  name=\"fullName\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  value={formData.fullName}\n                  onChange={handleChange}\n                  required\n                  data-testid=\"input-full-name\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"studentPhone\">Student Phone *</Label>\n                <Input\n                  id=\"studentPhone\"\n                  name=\"studentPhone\"\n                  type=\"tel\"\n                  placeholder=\"+91 9876543210\"\n                  value={formData.studentPhone}\n                  onChange={handleChange}\n                  required\n                  data-testid=\"input-student-phone\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"parentPhone\">Parent Phone *</Label>\n                <Input\n                  id=\"parentPhone\"\n                  name=\"parentPhone\"\n                  type=\"tel\"\n                  placeholder=\"+91 9876543210\"\n                  value={formData.parentPhone}\n                  onChange={handleChange}\n                  required\n                  data-testid=\"input-parent-phone\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"studentEmail\">Student Email *</Label>\n                <Input\n                  id=\"studentEmail\"\n                  name=\"studentEmail\"\n                  type=\"email\"\n                  placeholder=\"john@example.com\"\n                  value={formData.studentEmail}\n                  onChange={handleChange}\n                  required\n                  data-testid=\"input-student-email\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"parentEmail\">Parent Email *</Label>\n                <Input\n                  id=\"parentEmail\"\n                  name=\"parentEmail\"\n                  type=\"email\"\n                  placeholder=\"parent@example.com\"\n                  value={formData.parentEmail}\n                  onChange={handleChange}\n                  required\n                  data-testid=\"input-parent-email\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"idPhoto\">ID Photo</Label>\n              <Input\n                id=\"idPhoto\"\n                name=\"idPhoto\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                data-testid=\"input-id-photo\"\n              />\n              <p className=\"text-xs text-muted-foreground\">Upload a clear photo for face recognition</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter password\"\n                  value={formData.password}\n                  onChange={handleChange}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password *</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"Confirm password\"\n                  value={formData.confirmPassword}\n                  onChange={handleChange}\n                  required\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isRegisterPending}\n              data-testid=\"button-register\"\n            >\n              {isRegisterPending ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <button\n                onClick={() => setLocation('/login')}\n                className=\"text-primary hover:underline font-medium\"\n                data-testid=\"link-login\"\n              >\n                Sign in here\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8438},"client/src/pages/Syllabus.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Nav from \"@/components/Nav\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, BookOpen, Calendar, CheckCircle, Circle, Edit, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\ninterface SyllabusItem {\n  id: string;\n  subject: string;\n  topic: string;\n  description?: string;\n  completed: boolean;\n  dueDate?: string;\n  createdAt: string;\n}\n\nexport default function Syllabus() {\n  const [isAddTopicOpen, setIsAddTopicOpen] = useState(false);\n  const [newTopic, setNewTopic] = useState({\n    subject: \"\",\n    topic: \"\",\n    description: \"\",\n    dueDate: \"\",\n  });\n  const [filter, setFilter] = useState<'all' | 'completed' | 'pending'>('all');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch syllabus items\n  const { data: syllabusData, isLoading } = useQuery({\n    queryKey: [\"/api/syllabus\"],\n    staleTime: 2 * 60 * 1000,\n  });\n\n  const syllabusItems: SyllabusItem[] = syllabusData?.syllabus || [];\n\n  const createTopicMutation = useMutation({\n    mutationFn: api.syllabus.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/syllabus\"] });\n      toast({\n        title: \"Success\",\n        description: \"Syllabus topic added successfully\",\n      });\n      setIsAddTopicOpen(false);\n      setNewTopic({\n        subject: \"\",\n        topic: \"\",\n        description: \"\",\n        dueDate: \"\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add syllabus topic\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTopic = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newTopic.subject || !newTopic.topic) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createTopicMutation.mutate({\n      ...newTopic,\n      completed: false,\n      dueDate: newTopic.dueDate ? new Date(newTopic.dueDate).toISOString() : undefined,\n    });\n  };\n\n  // Filter syllabus items\n  const filteredItems = syllabusItems.filter(item => {\n    if (filter === 'completed') return item.completed;\n    if (filter === 'pending') return !item.completed;\n    return true;\n  });\n\n  // Group by subject\n  const groupedItems = filteredItems.reduce((acc, item) => {\n    if (!acc[item.subject]) {\n      acc[item.subject] = [];\n    }\n    acc[item.subject].push(item);\n    return acc;\n  }, {} as Record<string, SyllabusItem[]>);\n\n  const getStatusBadge = (completed: boolean, dueDate?: string) => {\n    if (completed) {\n      return <Badge className=\"bg-green-100 text-green-700\">Completed</Badge>;\n    }\n    \n    if (dueDate) {\n      const today = new Date();\n      const due = new Date(dueDate);\n      const diffTime = due.getTime() - today.getTime();\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      if (diffDays < 0) {\n        return <Badge variant=\"destructive\">Overdue</Badge>;\n      } else if (diffDays <= 3) {\n        return <Badge className=\"bg-orange-100 text-orange-700\">Due Soon</Badge>;\n      }\n    }\n    \n    return <Badge variant=\"secondary\">Pending</Badge>;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getCompletionStats = () => {\n    const total = syllabusItems.length;\n    const completed = syllabusItems.filter(item => item.completed).length;\n    const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n    \n    return { total, completed, percentage };\n  };\n\n  const stats = getCompletionStats();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Nav />\n      \n      <main className=\"pt-16 pb-20 md:pt-0 md:pb-0 md:ml-64 min-h-screen\">\n        <div className=\"p-4 md:p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground\">Course Syllabus</h2>\n                  <p className=\"text-muted-foreground\">Track your learning progress</p>\n                </div>\n                <Dialog open={isAddTopicOpen} onOpenChange={setIsAddTopicOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-add-topic\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Topic\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Add Syllabus Topic</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleCreateTopic} className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"subject\">Subject *</Label>\n                        <Input\n                          id=\"subject\"\n                          value={newTopic.subject}\n                          onChange={(e) => setNewTopic(prev => ({ ...prev, subject: e.target.value }))}\n                          placeholder=\"Enter subject name\"\n                          required\n                          data-testid=\"input-topic-subject\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"topic\">Topic *</Label>\n                        <Input\n                          id=\"topic\"\n                          value={newTopic.topic}\n                          onChange={(e) => setNewTopic(prev => ({ ...prev, topic: e.target.value }))}\n                          placeholder=\"Enter topic name\"\n                          required\n                          data-testid=\"input-topic-name\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"description\">Description</Label>\n                        <Textarea\n                          id=\"description\"\n                          value={newTopic.description}\n                          onChange={(e) => setNewTopic(prev => ({ ...prev, description: e.target.value }))}\n                          placeholder=\"Enter topic description\"\n                          data-testid=\"textarea-topic-description\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"dueDate\">Due Date</Label>\n                        <Input\n                          id=\"dueDate\"\n                          type=\"date\"\n                          value={newTopic.dueDate}\n                          onChange={(e) => setNewTopic(prev => ({ ...prev, dueDate: e.target.value }))}\n                          data-testid=\"input-topic-due-date\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex space-x-2\">\n                        <Button \n                          type=\"submit\" \n                          disabled={createTopicMutation.isPending}\n                          data-testid=\"button-create-topic\"\n                        >\n                          {createTopicMutation.isPending ? \"Adding...\" : \"Add Topic\"}\n                        </Button>\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsAddTopicOpen(false)}\n                          data-testid=\"button-cancel-topic\"\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n\n            {/* Progress Summary */}\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"text-completion-percentage\">\n                      {stats.percentage}%\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Completion Rate</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-green-600 mb-2\" data-testid=\"text-completed-topics\">\n                      {stats.completed}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Topics Completed</p>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-blue-600 mb-2\" data-testid=\"text-total-topics\">\n                      {stats.total}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Total Topics</p>\n                  </div>\n                </div>\n                \n                {stats.total > 0 && (\n                  <div className=\"mt-6\">\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                        style={{ width: `${stats.percentage}%` }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Filter Tabs */}\n            <div className=\"flex space-x-2 mb-6\">\n              <Button\n                variant={filter === 'all' ? 'default' : 'outline'}\n                onClick={() => setFilter('all')}\n                data-testid=\"filter-all\"\n              >\n                All Topics ({syllabusItems.length})\n              </Button>\n              <Button\n                variant={filter === 'pending' ? 'default' : 'outline'}\n                onClick={() => setFilter('pending')}\n                data-testid=\"filter-pending\"\n              >\n                Pending ({syllabusItems.filter(item => !item.completed).length})\n              </Button>\n              <Button\n                variant={filter === 'completed' ? 'default' : 'outline'}\n                onClick={() => setFilter('completed')}\n                data-testid=\"filter-completed\"\n              >\n                Completed ({syllabusItems.filter(item => item.completed).length})\n              </Button>\n            </div>\n\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">Loading syllabus...</p>\n              </div>\n            ) : Object.keys(groupedItems).length > 0 ? (\n              <div className=\"space-y-6\">\n                {Object.entries(groupedItems).map(([subject, items]) => (\n                  <Card key={subject}>\n                    <CardContent className=\"p-6\">\n                      <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                        <BookOpen className=\"w-5 h-5 mr-2\" />\n                        {subject}\n                        <Badge variant=\"outline\" className=\"ml-2\">\n                          {items.filter(item => item.completed).length}/{items.length}\n                        </Badge>\n                      </h3>\n                      \n                      <div className=\"space-y-4\">\n                        {items.map((item, index) => (\n                          <div \n                            key={item.id} \n                            className=\"flex items-start space-x-4 p-4 border border-border rounded-lg hover:bg-accent/50 transition-colors\"\n                            data-testid={`syllabus-item-${index}`}\n                          >\n                            <div className=\"mt-1\">\n                              {item.completed ? (\n                                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                              ) : (\n                                <Circle className=\"w-5 h-5 text-muted-foreground\" />\n                              )}\n                            </div>\n                            \n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <h4 className={`font-medium ${item.completed ? 'line-through text-muted-foreground' : 'text-foreground'}`}>\n                                  {item.topic}\n                                </h4>\n                                {getStatusBadge(item.completed, item.dueDate)}\n                              </div>\n                              \n                              {item.description && (\n                                <p className=\"text-sm text-muted-foreground mb-2\">{item.description}</p>\n                              )}\n                              \n                              {item.dueDate && (\n                                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                                  <Calendar className=\"w-4 h-4\" />\n                                  <span>Due: {formatDate(item.dueDate)}</span>\n                                </div>\n                              )}\n                            </div>\n                            \n                            <div className=\"flex space-x-2\">\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-topic-${index}`}>\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-delete-topic-${index}`}>\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\" data-testid=\"empty-syllabus\">\n                <BookOpen className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">No syllabus topics</h3>\n                <p className=\"text-muted-foreground mb-6\">Add your first topic to start tracking your progress</p>\n                <Button onClick={() => setIsAddTopicOpen(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Topic\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15613},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false\n  }\n});\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":434},"server/emailService.ts":{"content":"import nodemailer from 'nodemailer';\n\n// Email configuration\nconst createTransporter = () => {\n  // For development, we'll use a test account\n  // For production, you should configure with your email provider\n  return nodemailer.createTransport({\n    host: 'smtp.gmail.com',\n    port: 587,\n    secure: false,\n    auth: {\n      user: process.env.EMAIL_USER,\n      pass: process.env.EMAIL_PASS,\n    },\n  });\n};\n\nexport interface WelcomeEmailData {\n  studentName: string;\n  studentEmail: string;\n  collegeRollNo: string;\n  parentEmail: string;\n}\n\nexport const sendWelcomeEmail = async (data: WelcomeEmailData): Promise<boolean> => {\n  try {\n    const transporter = createTransporter();\n\n    // Send email to student\n    const studentEmailHtml = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #4f46e5; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; border: 1px solid #e5e7eb; }\n          .button { background: #4f46e5; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; margin: 10px 0; }\n          .footer { text-align: center; margin-top: 20px; font-size: 14px; color: #6b7280; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>Welcome to Student Attendance System</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Hello ${data.studentName}!</h2>\n            <p>Welcome to our Student Attendance & Automation System. Your account has been successfully created.</p>\n            \n            <h3>Your Account Details:</h3>\n            <ul>\n              <li><strong>Roll Number:</strong> ${data.collegeRollNo}</li>\n              <li><strong>Email:</strong> ${data.studentEmail}</li>\n            </ul>\n            \n            <h3>What's Next?</h3>\n            <ul>\n              <li>🎯 Set up face recognition for automated attendance</li>\n              <li>📅 View your attendance history and statistics</li>\n              <li>💬 Connect with classmates in the chat room</li>\n              <li>📚 Track your syllabus progress</li>\n              <li>📋 Check exam schedules and calendar events</li>\n            </ul>\n            \n            <p>Start by logging in and setting up your face recognition profile for seamless attendance marking.</p>\n            \n            <div class=\"footer\">\n              <p>This is an automated message. Please do not reply to this email.</p>\n            </div>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    // Send email to parent\n    const parentEmailHtml = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #059669; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; border: 1px solid #e5e7eb; }\n          .footer { text-align: center; margin-top: 20px; font-size: 14px; color: #6b7280; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>Student Account Notification</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Dear Parent/Guardian,</h2>\n            <p>Your child has been successfully registered in our Student Attendance & Automation System.</p>\n            \n            <h3>Student Details:</h3>\n            <ul>\n              <li><strong>Name:</strong> ${data.studentName}</li>\n              <li><strong>Roll Number:</strong> ${data.collegeRollNo}</li>\n              <li><strong>Student Email:</strong> ${data.studentEmail}</li>\n            </ul>\n            \n            <h3>System Features:</h3>\n            <ul>\n              <li>📊 Real-time attendance tracking</li>\n              <li>🔐 Secure face recognition technology</li>\n              <li>📱 Mobile-friendly interface</li>\n              <li>📈 Attendance statistics and reports</li>\n              <li>📅 Academic calendar integration</li>\n            </ul>\n            \n            <p>You will receive regular updates about your child's attendance and academic activities.</p>\n            \n            <div class=\"footer\">\n              <p>This is an automated message. Please do not reply to this email.</p>\n              <p>For any queries, please contact the college administration.</p>\n            </div>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    // Send emails concurrently\n    await Promise.all([\n      transporter.sendMail({\n        from: process.env.EMAIL_USER || 'noreply@college.edu',\n        to: data.studentEmail,\n        subject: 'Welcome to Student Attendance System - Account Created Successfully',\n        html: studentEmailHtml,\n      }),\n      transporter.sendMail({\n        from: process.env.EMAIL_USER || 'noreply@college.edu',\n        to: data.parentEmail,\n        subject: 'Student Account Created - Attendance System Notification',\n        html: parentEmailHtml,\n      })\n    ]);\n\n    console.log(`Welcome emails sent successfully to ${data.studentEmail} and ${data.parentEmail}`);\n    return true;\n  } catch (error) {\n    console.error('Error sending welcome emails:', error);\n    return false;\n  }\n};\n\nexport const sendAttendanceNotification = async (\n  studentEmail: string,\n  parentEmail: string,\n  studentName: string,\n  status: string,\n  subject?: string,\n  date?: Date\n): Promise<boolean> => {\n  try {\n    const transporter = createTransporter();\n    const formattedDate = date ? date.toLocaleDateString() : new Date().toLocaleDateString();\n    \n    const emailHtml = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: ${status === 'present' ? '#10b981' : '#ef4444'}; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; border: 1px solid #e5e7eb; }\n          .status { font-size: 24px; font-weight: bold; text-transform: uppercase; }\n          .footer { text-align: center; margin-top: 20px; font-size: 14px; color: #6b7280; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>Attendance Notification</h1>\n            <div class=\"status\">${status}</div>\n          </div>\n          <div class=\"content\">\n            <h2>Attendance Update for ${studentName}</h2>\n            <p>This is to inform you about the attendance status:</p>\n            \n            <ul>\n              <li><strong>Date:</strong> ${formattedDate}</li>\n              <li><strong>Status:</strong> ${status.toUpperCase()}</li>\n              ${subject ? `<li><strong>Subject:</strong> ${subject}</li>` : ''}\n              <li><strong>Time:</strong> ${new Date().toLocaleTimeString()}</li>\n            </ul>\n            \n            <div class=\"footer\">\n              <p>This is an automated attendance notification.</p>\n            </div>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    await transporter.sendMail({\n      from: process.env.EMAIL_USER || 'noreply@college.edu',\n      to: [studentEmail, parentEmail],\n      subject: `Attendance Alert: ${studentName} - ${status.toUpperCase()} (${formattedDate})`,\n      html: emailHtml,\n    });\n\n    console.log(`Attendance notification sent to ${studentEmail} and ${parentEmail}`);\n    return true;\n  } catch (error) {\n    console.error('Error sending attendance notification:', error);\n    return false;\n  }\n};","size_bytes":8130}},"version":1}